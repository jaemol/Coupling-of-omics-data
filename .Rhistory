ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1:2]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,2]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
sum(pca.var.per[1:10])
sum(pca.var.per[1:50])
sum(pca.var.per[1:60])
sum(pca.var.per[1:100])
sum(pca.var.per[1:90])
sum(pca.var.per[1:87])
sum(pca.var.per[1:80])
sum(pca.var.per[1:75])
sum(pca.var.per[1:60])
sum(pca.var.per[1:68])
sum(pca.var.per[1:69])
?prcomp
# making PCA model
pcaModel <- prcomp(inData, center = TRUE, scale = TRUE)
# making scree plot, to visualize eigenvalues
fviz_eig(pcaModel)
####################################
pca <- prcomp((inData), center = TRUE, scale=TRUE)
## plot pc1 and pc2
plot(pca$x[,1], pca$x[,2])
## make a scree plot
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## now make a fancy looking plot that shows the PCs and the variation:
library(ggplot2)
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
abline(h=1/ncol(inData)*100, col='red')
# making scree plot, to visualize eigenvalues
fviz_eig(pcaModel)
abline(h=1/ncol(inData)*100, col='red')
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1]
####################################
pca <- prcomp((inData), scale=TRUE)
## plot pc1 and pc2
plot(pca$x[,1], pca$x[,2])
## make a scree plot
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
plot(pca$x[,1], pca$x[,3])
## make a scree plot
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
abline(h=1/ncol(inData)*100, col='red')
# other way! - making scree plot, to visualize eigenvalues
fviz_eig(pcaModel)
## now make a fancy looking plot that shows the PCs and the variation:
library(ggplot2)
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
colnames(inData[,1])
colnames(inData[1])
# excluding testID and OUA (antibiotics used or not)
inData = data
testID  <- inData$testID
OUA     <- inData$OUA
inData = subset(inData, select = -c(testID, OUA))
rownames(inData) <- testID
# selecting arbitrary cluster number, just for visualization
kmeans_model <- kmeans(inData, 3, nstart = 10)
# generating cluster
fviz_cluster(kmeans_model, inData, frame = FALSE, geom = "point")
findEpsi=function(L, minRange=0,maxRange=3, steps=0.1, maxY=200, minP=10) {
plot(0,0, col=0,xlim=c(minRange,maxRange), ylim=c(0,maxY))
legend("topright", legend = c("nClust","nOutliers"), col=1:2, pch=16)
for(i in seq(minRange,maxRange,steps)) {
DB=dbscan::dbscan(L,i,minP)
points(i,length(unique(DB$cluster)), pch=16, col=1)
points(i,length(which(DB$cluster==0)), pch=16,col=2)
#print(i)
#sprintf("clusters: %f",length(unique(DB$cluster)))
}
}
inDataScale=scale(inData, center = T, scale = T)
findEpsi(inDataScale, minRange = 0, maxRange = 65, steps = 1 ,maxY=900)
findEpsi(inDataScale, minRange = 0, maxRange = 65, steps = 1 ,maxY=50)
dbscan::dbscan(inDataScale,6,3)
# excluding testID and OUA (antibiotics used or not)
inData = data
testID  <- inData$testID
OUA     <- inData$OUA
inData = subset(inData, select = -c(testID, OUA))
inData = t(inData)
colnames(inData) <- testID
inDataScale=scale(inData, center = T, scale = T)
findEpsi(inDataScale, minRange = 0, maxRange = 65, steps = 1 ,maxY=50)
View(inData)
findEpsi(inDataScale, minRange = 0, maxRange = 65, steps = 1 ,maxY=50,minP = 5)
findEpsi(inDataScale, minRange = 0, maxRange = 105, steps = 1 ,maxY=50,minP = 5)
inDataScale=scale(inData, center = T, scale = T)
findEpsi(inDataScale, minRange = 0, maxRange = 105, steps = 1 ,maxY=50,minP = 5)
View(inDataScale)
inData = subset(inData, select = -c(testID, OUA))
# excluding testID and OUA (antibiotics used or not)
inData = data
testID  <- inData$testID
OUA     <- inData$OUA
inData = subset(inData, select = -c(testID, OUA))
inDataScale=scale(inData, center = T, scale = T)
findEpsi(t(inDataScale), minRange = 0, maxRange = 105, steps = 1 ,maxY=50,minP = 5)
findEpsi(t(inDataScale), minRange = 20, maxRange = 40, steps = .1 ,maxY=10,minP = 5)
findEpsi(t(inDataScale), minRange = 30, maxRange = 33, steps = .1 ,maxY=10,minP = 5)
findEpsi=function(L, minRange=0,maxRange=3, steps=0.1, maxY=200, minP=10) {
plot(0,0, col=0,xlim=c(minRange,maxRange), ylim=c(0,maxY))
legend("topright", legend = c("nClust","nOutliers"), col=1:2, pch=16)
for(i in seq(minRange,maxRange,steps)) {
DB=dbscan::dbscan(L,i,minP)
points(i,length(unique(DB$cluster)), pch=16, col=1)
points(i,length(which(DB$cluster==0)), pch=16,col=2)
#print(i)
#sprintf("clusters: %f",length(unique(DB$cluster)))
}
abline(v=seq(minRange,maxRange,steps))
}
inDataScale=scale(inData, center = T, scale = T)
findEpsi(t(inDataScale), minRange = 30, maxRange = 33, steps = .1 ,maxY=10,minP = 5)
dbscan::dbscan(t(inDataScale),31.7,5)
DB=dbscan::dbscan(t(inDataScale),31.7,5)
DB$cluster
data.frame(DB$cluster, colnames(inDataScale)
)
clusVars=data.frame(DB$cluster, colnames(inDataScale))
clusVars=data.frame(Clus=DB$cluster,Vars=colnames(inDataScale))
subset(clusVars, Clus==1)
subset(clusVars, Clus==2)
subset(clusVars, Clus==3)
subset(clusVars, Clus==4)
subset(clusVars, Clus==5)
subset(clusVars, Clus==6)
subset(clusVars, Clus==7)
subset(clusVars, Clus==1)
findEpsi(t(inDataScale), minRange = 30, maxRange = 33, steps = .1 ,maxY=10,minP = 3)
findEpsi(t(inDataScale), minRange = 0, maxRange = 100, steps = .1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 0, maxRange = 100, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 20, maxRange = 40, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 28, maxRange = 33, steps = .1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 30, maxRange = 32, steps = .1 ,maxY=100,minP = 3)
DB=dbscan::dbscan(t(inDataScale),31.7,5)
DB=dbscan::dbscan(t(inDataScale),31.3,3)
clusVars=data.frame(Clus=DB$cluster,Vars=colnames(inDataScale))
subset(clusVars, Clus==1)
subset(clusVars, Clus==2)
subset(clusVars, Clus==3)
subset(clusVars, Clus==4)
subset(clusVars, Clus==5)
subset(clusVars, Clus==6)
subset(clusVars, Clus==7)
subset(clusVars, Clus==8)
subset(clusVars, Clus==9)
subset(clusVars, Clus==10)
subset(clusVars, Clus==0)
plot(inDataScale$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella,
inDataScale$Increp64)
inDataScale=data.frame(scale(inData, center = T, scale = T))
plot(inDataScale$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella,
inDataScale$Increp64)
plot(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella,
inData$Increp64)
plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
log1p(inData$Increp64))
# excluding testID and OUA (antibiotics used or not)
inData = data
testID  <- inData$testID
OUA     <- inData$OUA
inData = subset(inData, select = -c(testID, OUA))
####################################
pca <- prcomp((inData), scale=TRUE)
## plot pc1 and pc2
plot(pca$x[,1], pca$x[,2])
plot(pca$x[,1], pca$x[,3])
## make a scree plot
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
abline(h=1/ncol(inData)*100, col='red')
# other way! - making scree plot, to visualize eigenvalues
fviz_eig(pcaModel)
## now make a fancy looking plot that shows the PCs and the variation:
library(ggplot2)
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
log1p(inData$Increp64))
subset(clusVars, Clus==0)
subset(clusVars, Clus==1)
subset(clusVars, Clus==2)
subset(clusVars, Clus==3)
subset(clusVars, Clus==4)
rm(list=ls())
data_16s  <- read.table("Testdata/allData_16S_cleaned.txt")
data_qpcr <- read.table("Testdata/allData_qPCR_cleaned.txt")
data_16s_original <- data_16s
data_qpcr_original <- data_qpcr
View(data_qpcr)
# loading function
source("Programming/extracting_data_KAT.R")
source("Programming/data_filtering.R")
# loading libraries
library(dbscan)
library(fpc)
library(factoextra)
# loading function
source("Programming/extracting_data_KAT.R")
source("Programming/data_filtering.R")
# setting seed
set.seed(123)
chosenWeek <- "Week 02"
inData <- extracting_data_KAT(whichWeek = chosenWeek)
# filtering data
inData <- data_filtering(inData)
View(inData)
# excluding testID and OUA (antibiotics used or not)
#inData = data
testID  <- inData$testID
OUA     <- inData$OUA
inData = subset(inData, select = -c(testID, OUA))
colnames(inData) <- testID
rownames(inData) <- testID
source("Function.R")
source("Programming/Function.R")
source("Programming/Functions.R")
# making DBSCAN model
inDataScale=data.frame(scale(inData, center = T, scale = T))
findEpsi(t(inDataScale), minRange = 30, maxRange = 32, steps = .1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 5, maxRange = 10, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 5, maxRange = 10, steps = .1 ,maxY=20,minP = 3)
DB=dbscan::dbscan(t(inDataScale),9.1,3)
clusVars=data.frame(Clus=DB$cluster,Vars=colnames(inDataScale))
DB
subset(clusVars, Clus==1)
subset(clusVars, Clus==2)
plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
log1p(inData$Increp64))
subset(clusVars, Clus==3)
subset(clusVars, Clus==4)
subset(clusVars, Clus==5)
unique(data_qpcr$SAMPLEWEEK)
sort(unique(data_qpcr$SAMPLEWEEK))
sort(unique(data_16s$SAMPLEWEEK))
subset(clusVars, Clus==1)
subset(clusVars, Clus==2)
subset(clusVars, Clus==3)
DB
subset(clusVars, Clus==4)
subset(clusVars, Clus==5)
subset(clusVars, Clus==5)[1]
subset(clusVars, Clus==5)[2]
subset(clusVars, Clus==5)[2][1]
subset(clusVars, Clus==5)[2][1][1]
subset(clusVars, Clus==5)[1,1]
subset(clusVars, Clus==5)[2,1]
subset(clusVars, Clus==5)[2,2]
subset(clusVars, Clus==5)[1,2]
sub <- subset(clusVars, Clus==5); print(sub)
View(sub)
sub[1,2]
#plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
#    log1p(inData$Increp64))
plot(log1p(inData$sub[1,2]))
#plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
#    log1p(inData$Increp64))
plot(log1p(inData$noquote(sub[1,2]))
#plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
#    log1p(inData$Increp64))
plot(log1p(inData$noquote(sub[1,2]), inData$noquote(sub[1,5]))
#plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
#    log1p(inData$Increp64))
plot(log1p(inData$noquote(sub[1,2])), log1p(inData$noquote(sub[1,5])))
sub[1,5]
sub[1,4]
sub[5,2]
#plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
#    log1p(inData$Increp64))
plot(log1p(inData$noquote(sub[1,2])), log1p(inData$noquote(sub[5,2])))
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==6)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==7)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==8)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==9)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==0)
# loading data
chosenWeek <- "Week 04"
inData <- extracting_data_KAT(whichWeek = chosenWeek)
# filtering data
inData <- data_filtering(inData)
# excluding testID and OUA (antibiotics used or not)
#inData = data
testID  <- inData$testID
OUA     <- inData$OUA
inData = subset(inData, select = -c(testID, OUA))
rownames(inData) <- testID
# making DBSCAN model
inDataScale=data.frame(scale(inData, center = T, scale = T))
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 5)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 2)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 1)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 2)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 8, maxRange = 11, steps = .1 ,maxY=15,minP = 3)
DB=dbscan::dbscan(t(inDataScale),8.7,3)
DB=dbscan::dbscan(t(inDataScale),8.7,3); print(DB)
clusVars=data.frame(Clus=DB$cluster,Vars=colnames(inDataScale))
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==5)
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
library(NetCoMi)
installNetCoMiPacks("SpiecEasi")
?installNetCoMiPacks
install.packages(c("ade4", "BiocManager", "blob", "broom", "car", "checkmate", "crayon", "DEoptimR", "dplyr", "DT", "fansi", "future", "future.apply", "ggplot2", "globals", "haven", "httr", "igraph", "kernlab", "knitr", "lme4", "magrittr", "maptools", "multcomp", "nloptr", "openssl", "paradox", "parallelly", "plyr", "polynom", "processx", "ps", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "readxl", "rmarkdown", "robustbase", "rprojroot", "sass", "scales", "sp", "testthat", "TH.data", "tibble", "tinytex", "tzdb", "uuid", "vctrs", "vegan", "xfun", "zoo"))
# loading library
library(NetCoMi)
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
# loading library
library(NetCoMi)
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
?installNetCoMiPacks()
# loading library
library(NetCoMi)
install.packages("chebpol")
rm(list=ls())
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
install.packages(c("mclust", "nloptr"))
# loading library
library(NetCoMi)
if(!requireNamespace("BiocManager", quietly = TRUE)){
utils::install.packages("BiocManager")
}
BiocManager::install(pkgs = c("Biobase", "doSNOW", "fdrtool", "filematrix",
"foreach", "graphics", "grDevices", "gtools",
"huge", "igraph", "MASS", "Matrix", "phyloseq",
"pulsar", "qgraph", "Rdpack", "snow", "SPRING",
"stats", "utils", "vegan", "WGCNA"))
devtools::install_github("GraceYoon/SPRING")
devtools::install_github("zdk123/SpiecEasi")
devtools::install_github("stefpeschel/NetCoMi",
dependencies = c("Depends", "Imports"),
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi",
dependencies = c("Depends", "Imports"),
repos = c("http://cloud.r-project.org/",
BiocManager::repositories()))
BiocManager::install(pkgs = c("Biobase", "doSNOW", "fdrtool", "filematrix",
"foreach", "graphics", "grDevices", "gtools",
"huge", "igraph", "MASS", "Matrix", "phyloseq",
"pulsar", "qgraph", "Rdpack", "snow", "SPRING",
"stats", "utils", "vegan", "WGCNA"))
devtools::install_github("GraceYoon/SPRING")
if(!requireNamespace("BiocManager", quietly = TRUE)){
utils::install.packages("BiocManager")
}
BiocManager::install(pkgs = c("Biobase", "doSNOW", "fdrtool", "filematrix",
"foreach", "graphics", "grDevices", "gtools",
"huge", "igraph", "MASS", "Matrix", "phyloseq",
"pulsar", "qgraph", "Rdpack", "snow", "SPRING",
"stats", "utils", "vegan", "WGCNA"))
BiocManager::install(pkgs = c("Biobase", "doSNOW", "fdrtool", "filematrix",
"foreach", "graphics", "grDevices", "gtools",
"huge", "igraph", "MASS", "Matrix", "phyloseq",
"pulsar", "qgraph", "Rdpack", "snow", "SPRING",
"stats", "utils", "vegan", "WGCNA"), type = "binary")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
install.packages("mixedCCA")
install.packages("SPRING")
devtools::install_github("irinagain/mixedCCA")
install.packages("latentcor")
library(SpiecEasi)
library(SPRING)
library(mixedCCA)
library(NetCoMi)
