avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
# for saving the plot as an image
png(filename = "Treated_Vs_Untreated_thres45.png",
width = 4000, height = 3000,units = "px", pointsize = 12,
bg = "white", res = 300, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"),
symbolfamily = "default")
dev.off() # shutting off image saving
plot(props_untreated_treated,
#layout = lay_fr,
#layout = "circle",
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = F,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("Untreated", "Treated"),
hubBorderCol  = "gray40")
png(filename = "Treated_Vs_Untreated_thres2.png",
width = 4000, height = 3000,units = "px", pointsize = 12,
bg = "white", res = 300, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"),
symbolfamily = "default")
plot(props_untreated_treated,
#layout = lay_fr,
#layout = "circle",
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = F,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("Untreated", "Treated"),
hubBorderCol  = "gray40")
dev.off() # shutting off image saving
# Network construction - TDAvsControl
net_untreated_treated <- netConstruct(data = data_untreated,
data2 = data_treated,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 76),
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 50),
measure = "pear", thresh = 0.7,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_untreated_treated <- netAnalyze(net_untreated_treated,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
# for saving the plot as an image
png(filename = "Treated_Vs_Untreated_thres7.png",
width = 4000, height = 3000,units = "px", pointsize = 12,
bg = "white", res = 300, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"),
symbolfamily = "default")
plot(props_untreated_treated,
#layout = lay_fr,
#layout = "circle",
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = F,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("Untreated", "Treated"),
hubBorderCol  = "gray40")
dev.off() # shutting off image saving
# loading NetCoMi library
library(NetCoMi)
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/Functions.R")
# loading data
chosenDataSet       = "metab"       # "metab" or "genom"
chosenTaxonomy      <- "species"    # "species" or "genus"
chosenWeek          <- "null"       # "1", "4", or "10"
chosenCutoffMass    <- 200          # arbitrary value, removing based on column name
chosenNormalization <- "peak"        # can either be 'mad', 'median', 'mean' or 'peak'
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization=chosenNormalization)
getwd()
rm(list=ls())
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/Functions.R")
# loading data
chosenDataSet       = "metab"       # "metab" or "genom"
chosenTaxonomy      <- "species"    # "species" or "genus"
chosenWeek          <- "null"       # "1", "4", or "10"
chosenCutoffMass    <- 200          # arbitrary value, removing based on column name
chosenNormalization <- "peak"        # can either be 'mad', 'median', 'mean' or 'peak'
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization=chosenNormalization)
# loading data
#data_phys_original  <- readRDS("Data/allDataMetataxonomicNCLTEE.rds")
load("Data/allData_16S_NCLTEE_Reduced.RData")
data_phys_original <- ps.new
# The actual data
df.otu.metatax      <- as.data.frame(data_phys_original@otu_table)
# The results / variables
df.tax.metatax      <- as.data.frame(data_phys_original@tax_table)
# The sample IDs
sampleID.metatax    <- data_phys_original@sam_data$sample.name
## setting up dataframe similar to Katrines
df.fulldata.metax <- as.data.frame(t(df.otu.metatax))
rownames(df.fulldata.metax) = sampleID.metatax
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",str_replace_na(df.tax.metatax$domain, replacement="NA"),"_",
str_replace_na(df.tax.metatax$phylum,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$class,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$order,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$family,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$genus,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$species, replacement="NA"))
colnames(df.fulldata.metax) = colnames_array_metatax
# saving information on phaeobacter presence
array.phaebac.bin <- data_phys_original@sam_data$phaeobacter
# moving up to genus level or staying at species
if (whichTaxLevel=="genus") {
# moving up in taxonomy for the 16s data, going from species to genus
origNames <- colnames(df.fulldata.metax)
newNames <- apply(str_split_fixed(string = origNames, pattern = "[_]",7)[,1:6],1, paste, collapse="_")
length(unique(newNames))
uniqNames=unique(newNames)
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
newDat=newDat[,-1]
colnames(newDat)=uniqNames
# now making that new data into 16s data set
df.fulldata.metax = newDat
}
#df.full.metax <- cbind(array.phaebac.bin,df.fulldata.metax)
df.full.metax <- df.fulldata.metax
# loading in data
df_metab_original <- read.csv("Data/allData_LCMS_metabolomics.csv", header = FALSE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE, skip = 1)
colnames(df_metab_original) = read.csv("Data/allData_LCMS_metabolomics.csv", header = F,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE, nrows = 1)
rownames(df_metab_original) = read.csv("Data/allData_LCMS_metabolomics.csv", header = F,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE)[-1,1]
# removing first column (masses)
df_metab_original = df_metab_original[,-1]
# transposing the data frame
df_metab_tmp1 = as.data.frame(t(df_metab_original))
# loading in metadata metabolomics sheet - changed data to .csv first, to make it work
metadata_metabolomics  <- read.csv("Data/Metadata-metabolomics.csv", fill = TRUE, header = TRUE, sep = ";")
# fetching first row
rownam_samples_metab  <- rownames(df_metab_tmp1)
# running through the names, matching them with phyloseq naming
metab_new_names <- rownam_samples_metab
i = 1
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$Sample.no...MCCe. == num_grep)
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/Functions.R")
# loading data
chosenDataSet       = "metab"       # "metab" or "genom"
chosenTaxonomy      <- "species"    # "species" or "genus"
chosenWeek          <- "null"       # "1", "4", or "10"
chosenCutoffMass    <- 200          # arbitrary value, removing based on column name
chosenNormalization <- "peak"        # can either be 'mad', 'median', 'mean' or 'peak'
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization=chosenNormalization)
# filtering data
chosenCutoffFiltering <- 0.85
inData <- data_filtering(data=inData, whichDataSet=chosenDataSet, whichWeek=chosenWeek, cutOffOrAuto=chosenCutoffFiltering)
# loading data
chosenDataSet       = "metab"       # "metab" or "genom"
chosenTaxonomy      <- "species"    # "species" or "genus"
chosenWeek          <- "null"       # "1", "4", or "10"
chosenCutoffMass    <- 200          # arbitrary value, removing based on column name
chosenNormalization <- "peak"        # can either be 'mad', 'median', 'mean' or 'peak'
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization=chosenNormalization)
# filtering data
chosenCutoffFiltering <- 0.78
inData <- data_filtering(data=inData, whichDataSet=chosenDataSet, whichWeek=chosenWeek, cutOffOrAuto=chosenCutoffFiltering)
# can only select week number 1, 4, 6, or 10
choiceOfWeekHere <- "null"
if (choiceOfWeekHere != "null") {
data = inData[gsub(".+-(?=\\d+$)", "", rownames(inData), perl = TRUE)==choiceOfWeekHere,]
} else {
data = inData
}
# run this for to simplify the naming of the 16s rRNA sequencing data
if (chosenTaxonomy=="genus"){
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
} else {
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
}
############################
# compare two networks differentiated upon presence of TDA or not
# splitting the data set of all weeks into three; TDA, noTDA and control
data_TDA      <- data[substr(rownames(data), 1, 1) == "D",]
data_noTDA    <- data[substr(rownames(data), 1, 1) == "P",]
data_control  <- data[substr(rownames(data), 1, 1) == "C",]
net_single_front <- netConstruct(data_noTDA,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
filtTax = "highestVar",
filtTaxPar = list(highestVar = 100),
measure = "spearman",thresh = chosenThreshold,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_single_front <- netAnalyze(net_single_front,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
plot(props_single_front,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman, treated", chosenWeek, chosenTaxonomy),
showTitle = T,
nodeSize = "mclr",
shortenLabels = "none",
cexNodes = 1.5,
cexTitle = 2.3)
chosenThreshold <- 0.45
net_single_front <- netConstruct(data_noTDA,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
filtTax = "highestVar",
filtTaxPar = list(highestVar = 100),
measure = "spearman",thresh = chosenThreshold,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_single_front <- netAnalyze(net_single_front,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
plot(props_single_front,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman, treated", chosenWeek, chosenTaxonomy),
showTitle = T,
nodeSize = "mclr",
shortenLabels = "none",
cexNodes = 1.5,
cexTitle = 2.3)
net_single_front <- netConstruct(data_noTDA,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
filtTax = "highestVar",
filtTaxPar = list(highestVar = 50),
measure = "spearman",thresh = chosenThreshold,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_single_front <- netAnalyze(net_single_front,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
plot(props_single_front,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman, treated", chosenWeek, chosenTaxonomy),
showTitle = T,
nodeSize = "mclr",
shortenLabels = "none",
cexNodes = 1.5,
cexTitle = 2.3)
plot(props_single_front,
labelScale = F,
cexLabels = 0,
#title1 = paste("Single network with Spearman, treated", chosenWeek, chosenTaxonomy),
showTitle = T,
nodeSize = "mclr",
shortenLabels = "none",
cexNodes = 1.5,
cexTitle = 2.3)
rm(list=ls())
# loading NetCoMi library
library(NetCoMi)
# loading functions
source("Programming/extracting_data_RWA.R")
source("Programming/data_filtering.R")
source("Programming/Functions.R")
# loading data
chosenWeek      <- "Week 02"
chosenTaxonomy  <- "genus"
inData <- extracting_data_KAT(whichWeek = chosenWeek, whichTaxLevel = chosenTaxonomy, loadOrigData = TRUE)
# filtering data
inData <- data_filtering(inData, whichDataSet = "genom")
# resetting plot window
par(mfrow=c(1,1))
# excluding testID and OUA (antibiotics used or not)
#inData = data
testID  <- inData$testID
OUA     <- inData$OUA
data = subset(inData, select = -c(testID, OUA))
dataOneColumns <- grep(x = colnames(data), pattern = "DATA.*")
colVector <- 1:length(colnames(data))
shapeArray <- 1:length(colnames(data))
dataOrigin <- 1:length(colnames(data))
for (i in 1:length(colVector)) {
if (i<=max(dataOneColumns)) {
colVector[i] = "green"
shapeArray[i] = "circle"
dataOrigin[i] = "16s"
} else {
colVector[i] = "red"
shapeArray[i] = "triangle"}
dataOrigin[i] = "qPCR"
}
if (chosenTaxonomy=="genus"){
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
} else {
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
}
# network untreated, single network with spearman association
data_untreated <- data[which(OUA==1),]
net_single_untreated <- netConstruct(data_untreated,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
#filtTax = "highestVar",
#filtTaxPar = list(highestVar = 50),
measure = "spearman",thresh = 0.5,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single_untreated <- netAnalyze(net_single_untreated,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
plot(props_single_untreated,
labelScale = F,
cexLabels = 1.3,
title1 = paste("Single network with Spearman, untreated", chosenWeek, chosenTaxonomy),
showTitle = T,
nodeSize = "mclr",
shortenLabels = "none",
cexNodes = 1.5,
cexTitle = 2.3,
nodeColor = "feature",
featVecCol = dataorigin,
colVector = c("green", "red"))
plot(props_single_untreated,
labelScale = F,
cexLabels = 1.3,
title1 = paste("Single network with Spearman, untreated", chosenWeek, chosenTaxonomy),
showTitle = T,
nodeSize = "mclr",
shortenLabels = "none",
cexNodes = 1.5,
cexTitle = 2.3,
nodeColor = "feature",
featVecCol = dataOrigin,
colVector = c("green", "red"))
dataOrigin
rm(list=ls())
# loading functions
source("Programming/extracting_data_RWA.R")
source("Programming/data_filtering.R")
source("Programming/Functions.R")
# loading data
chosenWeek      <- "Week 02"
chosenTaxonomy  <- "genus"
inData <- extracting_data_KAT(whichWeek = chosenWeek, whichTaxLevel = chosenTaxonomy, loadOrigData = TRUE)
# filtering data
inData <- data_filtering(inData, whichDataSet = "genom")
# resetting plot window
par(mfrow=c(1,1))
# excluding testID and OUA (antibiotics used or not)
#inData = data
testID  <- inData$testID
OUA     <- inData$OUA
data = subset(inData, select = -c(testID, OUA))
dataOneColumns <- grep(x = colnames(data), pattern = "DATA.*")
colVector <- 1:length(colnames(data))
shapeArray <- 1:length(colnames(data))
dataOrigin <- 1:length(colnames(data))
for (i in 1:length(colVector)) {
if (i<=max(dataOneColumns)) {
colVector[i] = "green"
shapeArray[i] = "circle"
dataOrigin[i] = "16s"
} else {
colVector[i] = "red"
shapeArray[i] = "triangle"
dataOrigin[i] = "qPCR"
}
}
if (chosenTaxonomy=="genus"){
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
} else {
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
}
# network untreated, single network with spearman association
data_untreated <- data[which(OUA==1),]
net_single_untreated <- netConstruct(data_untreated,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
#filtTax = "highestVar",
#filtTaxPar = list(highestVar = 50),
measure = "spearman",thresh = 0.5,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single_untreated <- netAnalyze(net_single_untreated,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
plot(props_single_untreated,
labelScale = F,
cexLabels = 1.3,
title1 = paste("Single network with Spearman, untreated", chosenWeek, chosenTaxonomy),
showTitle = T,
nodeSize = "mclr",
shortenLabels = "none",
cexNodes = 1.5,
cexTitle = 2.3,
nodeColor = "feature",
featVecCol = dataOrigin,
colVector = c("green", "red"))
dataOrigin
