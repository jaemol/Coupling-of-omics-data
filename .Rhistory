lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
summary(props_TDA_noTDA)
# for saving the plot as an image
# png(filename = "TDA_Vs_Control_thres65_mad.png",
#     width = 4000, height = 3000,units = "px", pointsize = 12,
#     bg = "white", res = 300, family = "", restoreConsole = TRUE,
#     type = c("windows", "cairo", "cairo-png"),
#     symbolfamily = "default")
plot(props_TDA_noTDA,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("TDA", "No TDA"),
hubBorderCol  = "gray40")
#dev.off() # shutting off image saving
legend("bottomleft", title = "estimated association:", legend = c("+","-"),
col = c("#009900","red"), inset = 0.02, cex = 2, lty = 1, lwd = 4,
bty = "n", horiz = TRUE)
comp_TDA_noTDA <- netCompare(props_TDA_noTDA, permTest = FALSE, verbose = FALSE)
summary(comp_TDA_noTDA,
groupNames = c("TDA", "No TDA"),
showCentr = c("degree", "between", "closeness"),
#showCentr = c("eigenvector"),
numbNodes = 5)
# Network construction - noTDAvsControl
net_noTDA_control <- netConstruct(data = data_noTDA,
data2 = data_control,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 50),
measure = "spearman", thresh = 0.4,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_noTDA_control <- netAnalyze(net_noTDA_control,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
summary(props_noTDA_control)
# for saving the plot as an image
# png(filename = "noTDA_Vs_Control_thres65_mad.png",
#     width = 4000, height = 3000,units = "px", pointsize = 12,
#     bg = "white", res = 300, family = "", restoreConsole = TRUE,
#     type = c("windows", "cairo", "cairo-png"),
#     symbolfamily = "default")
plot(props_noTDA_control,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("No TDA", "Control"),
hubBorderCol  = "gray40")
#dev.off() # shutting off image saving
# legend("bottomleft", title = "estimated association:", legend = c("+","-"),
#        col = c("#009900","red"), inset = 0.02, cex = 2, lty = 1, lwd = 4,
#        bty = "n", horiz = TRUE)
comp_noTDA_control <- netCompare(props_noTDA_control, permTest = FALSE, verbose = FALSE)
summary(comp_noTDA_control,
groupNames = c("No TDA", "TDA"),
showCentr = c("degree", "between", "closeness"),
#showCentr = c("eigenvector"),
numbNodes = 5)
# Network construction - TDAvsControl
net_TDA_control <- netConstruct(data = data_TDA,
data2 = data_control,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 50),
measure = "spearman", thresh = 0.4,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_TDA_control <- netAnalyze(net_TDA_control,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
summary(props_TDA_control)
# for saving the plot as an image
# png(filename = "TDA_Vs_Control_thres65_mad.png",
#     width = 4000, height = 3000,units = "px", pointsize = 12,
#     bg = "white", res = 300, family = "", restoreConsole = TRUE,
#     type = c("windows", "cairo", "cairo-png"),
#     symbolfamily = "default")
plot(props_TDA_control,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("TDA", "Control"),
hubBorderCol  = "gray40")
#dev.off() # shutting off image saving
# legend("bottomleft", title = "estimated association:", legend = c("+","-"),
#        col = c("#009900","red"), inset = 0.02, cex = 2, lty = 1, lwd = 4,
#        bty = "n", horiz = TRUE)
comp_TDA_control <- netCompare(props_TDA_control, permTest = FALSE, verbose = FALSE)
summary(comp_TDA_control,
groupNames = c("TDA", "Control"),
showCentr = c("degree", "between", "closeness"),
#showCentr = c("eigenvector"),
numbNodes = 5)
# Network construction - TDAvsControl
net_TDA_noTDA <- netConstruct(data = data_TDA,
data2 = data_noTDA,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 50),
measure = "spearman", thresh = 0.4,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_TDA_noTDA <- netAnalyze(net_TDA_noTDA,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
summary(props_TDA_noTDA)
# for saving the plot as an image
# png(filename = "TDA_Vs_Control_thres65_mad.png",
#     width = 4000, height = 3000,units = "px", pointsize = 12,
#     bg = "white", res = 300, family = "", restoreConsole = TRUE,
#     type = c("windows", "cairo", "cairo-png"),
#     symbolfamily = "default")
plot(props_TDA_noTDA,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("TDA", "No TDA"),
hubBorderCol  = "gray40")
#dev.off() # shutting off image saving
# legend("bottomleft", title = "estimated association:", legend = c("+","-"),
#        col = c("#009900","red"), inset = 0.02, cex = 2, lty = 1, lwd = 4,
#        bty = "n", horiz = TRUE)
comp_TDA_noTDA <- netCompare(props_TDA_noTDA, permTest = FALSE, verbose = FALSE)
summary(comp_TDA_noTDA,
groupNames = c("TDA", "No TDA"),
showCentr = c("degree", "between", "closeness"),
#showCentr = c("eigenvector"),
numbNodes = 5)
# Network construction - noTDAvsControl
net_noTDA_control <- netConstruct(data = data_noTDA,
data2 = data_control,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 50),
measure = "spearman", thresh = 0.4,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_noTDA_control <- netAnalyze(net_noTDA_control,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
summary(props_noTDA_control)
# for saving the plot as an image
png(filename = "noTDA_Vs_Control_thres40_mad.png",
width = 4000, height = 3000,units = "px", pointsize = 12,
bg = "white", res = 300, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"),
symbolfamily = "default")
# for saving the plot as an image
png(filename = "noTDA_Vs_Control_thres40_mad.png",
width = 4000, height = 3000,units = "px", pointsize = 12,
bg = "white", res = 300, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"),
symbolfamily = "default")
plot(props_noTDA_control,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("No TDA", "Control"),
hubBorderCol  = "gray40")
dev.off() # shutting off image saving
# for saving the plot as an image
png(filename = "TDA_Vs_Control_thres40_mad.png",
width = 4000, height = 3000,units = "px", pointsize = 12,
bg = "white", res = 300, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"),
symbolfamily = "default")
plot(props_TDA_control,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("TDA", "Control"),
hubBorderCol  = "gray40")
dev.off() # shutting off image saving
# for saving the plot as an image
png(filename = "TDA_Vs_NoTDA_thres40_mad.png",
width = 4000, height = 3000,units = "px", pointsize = 12,
bg = "white", res = 300, family = "", restoreConsole = TRUE,
type = c("windows", "cairo", "cairo-png"),
symbolfamily = "default")
plot(props_TDA_noTDA,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("TDA", "No TDA"),
hubBorderCol  = "gray40")
dev.off() # shutting off image saving
# normalizing per mean
data_metab = as.data.frame(apply(df_metab_tmp3, MARGIN = 2, function(x){x/(mean(x)+1)}))
source("Programming/Functions.R")
# getting the data
list[data_peak, strata_field]   <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "peak")
list[data_median, strata_field] <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "median")
list[data_mad, strata_field]    <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "mad")
list[data_mean, strata_field]    <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "mean")
#adonis2(data_mad ~ strata_field, strata = NULL, permutations = 999, by = NULL)
adonis2(data_mean ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
# loading libraries
library(vegan)
library(gsubfn)
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/data_analyze.R")
source("Programming/Functions.R")
# getting the data
list[data_peak, strata_field]   <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "peak")
list[data_median, strata_field] <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "median")
list[data_mad, strata_field]    <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "mad")
list[data_mean, strata_field]    <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "mean")
dist_median <- as.matrix(dist(data_median, method = "euclidean"))
here <- as.dist(dist_median)
# adonis(Y ~ NO3, data=dat, strata=dat$field, perm=999)
ado_peak <- adonis2(data_peak ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
adonis2(data_median ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
adonis2(data_mad ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
#adonis2(data_mad ~ strata_field, strata = NULL, permutations = 999, by = NULL)
adonis2(data_mean ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
View(data_mean)
View(data_median)
View(data_mad)
#adonis2(data_mad ~ strata_field, strata = NULL, permutations = 999, by = NULL)
adonis2(data_mean ~ strata_field, strata = NULL, permutations = 999, by = NULL, method = "euclidean")
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/data_analyze.R")
# loading data
chosenDataSet       = "metab"       # "metab" or "genom"
chosenTaxonomy      <- "species"    # "species" or "genus"
chosenWeek          <- "null"       # "1", "4", or "10"
chosenCutoffMass    <- 200          # arbitrary value, removing based on column name
chosenNormalization <- "mean"        # can either be 'mad', 'median' or 'peak'
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization=chosenNormalization)
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization=chosenNormalization)
chosenNormalization <- "mad"        # can either be 'mad', 'median' or 'peak'
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization=chosenNormalization)
# loading libraries
library(vegan)
library(gsubfn)
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/data_analyze.R")
source("Programming/Functions.R")
# getting the data
list[data_peak, strata_field]   <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "peak")
list[data_median, strata_field] <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "median")
list[data_mad, strata_field]    <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "mad")
list[data_mean, strata_field]    <- getMetabDataNormEval(cutOffMetabMass = 200, whichNormalization = "mean")
dist_median <- as.matrix(dist(data_median, method = "euclidean"))
here <- as.dist(dist_median)
# adonis(Y ~ NO3, data=dat, strata=dat$field, perm=999)
ado_peak <- adonis2(data_peak ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
adonis2(data_median ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
adonis2(data_mad ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
#adonis2(data_mad ~ strata_field, strata = NULL, permutations = 999, by = NULL)
adonis2(data_mean ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
source("Programming/Functions.R")
source("Programming/Functions.R")
# getting the data
list[data_metab, strata_field]  <- getMetabDataNormEval(cutOffMetabMass = 200)
library(gsubfn)
# getting the data
list[data_metab, strata_field]  <- getMetabDataNormEval(cutOffMetabMass = 200)
# loading libraries
library(vegan)
library(gsubfn)
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/data_analyze.R")
source("Programming/Functions.R")
# getting the data
list[data_metab, strata_field]  <- getMetabDataNormEval(cutOffMetabMass = 200)
rm(list=ls())
# loading libraries
library(vegan)
library(gsubfn)
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/data_analyze.R")
source("Programming/Functions.R")
# getting the data
list[data_metab, strata_field]  <- getMetabDataNormEval(cutOffMetabMass = 200)
source("Programming/Functions.R")
# getting the data
list[data_metab, strata_field]  <- getMetabDataNormEval(cutOffMetabMass = 200)
# implementing the different normalizations
data_peak <- as.data.frame(apply(df_metab_tmp3,MARGIN = 2, function(x){x/max(x)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
# implementing the different normalizations
data_peak <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/max(x)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
rm(list=ls())
# loading libraries
library(vegan)
library(gsubfn)
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/data_analyze.R")
source("Programming/Functions.R")
# getting the data
list[data_metab, strata_field]  <- getMetabDataNormEval(cutOffMetabMass = 200)
# implementing the different normalizations
data_peak   <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/max(x)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
data_median <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/(median(x)+1)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
data_mean   <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/(mean(x)+1)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
data_mad    <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/(mad(x, center = median(x), na.rm = FALSE, constant = 1)+1)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
dist_median <- as.matrix(dist(data_median, method = "euclidean"))
here <- as.dist(dist_median)
# adonis(Y ~ NO3, data=dat, strata=dat$field, perm=999)
ado_peak <- adonis2(data_peak ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
adonis2(data_median ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
adonis2(data_mad ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
#adonis2(data_mad ~ strata_field, strata = NULL, permutations = 999, by = NULL)
adonis2(data_mean ~ strata_field, strata = strata_field, permutations = 999, by = NULL, method = "euclidean")
rm(list=ls())
# can only select week number 1, 4, 6, or 10
choiceOfWeekHere <- "null"
if (choiceOfWeekHere != "null") {
data = inData[gsub(".+-(?=\\d+$)", "", rownames(inData), perl = TRUE)==choiceOfWeekHere,]
} else {
data = inData
}
# loading NetCoMi library
library(NetCoMi)
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
#source("Programming/data_analyze.R")
source("Programming/Functions.R")
# loading data
chosenDataSet       = "metab"       # "metab" or "genom"
chosenTaxonomy      <- "species"    # "species" or "genus"
chosenWeek          <- "null"       # "1", "4", or "10"
chosenCutoffMass    <- 200          # arbitrary value, removing based on column name
chosenNormalization <- "mean"        # can either be 'mad', 'median' or 'peak'
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization=chosenNormalization)
# filtering data
chosenCutoffFiltering <- 0.85
inData <- data_filtering(data=inData, whichDataSet=chosenDataSet, whichWeek=chosenWeek, cutOffOrAuto=chosenCutoffFiltering)
# can only select week number 1, 4, 6, or 10
choiceOfWeekHere <- "null"
if (choiceOfWeekHere != "null") {
data = inData[gsub(".+-(?=\\d+$)", "", rownames(inData), perl = TRUE)==choiceOfWeekHere,]
} else {
data = inData
}
if (chosenTaxonomy=="genus"){
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
} else {
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
}
############################
# compare two networks differentiated upon presence of TDA or not
# splitting the data set of all weeks into three; TDA, noTDA and control
data_TDA      <- data[substr(rownames(data), 1, 1) == "D",]
data_noTDA    <- data[substr(rownames(data), 1, 1) == "P",]
data_control  <- data[substr(rownames(data), 1, 1) == "C",]
# Network construction - noTDAvsControl
net_noTDA_control <- netConstruct(data = data_noTDA,
data2 = data_control,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 50),
measure = "spearman", thresh = 0.4,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_noTDA_control <- netAnalyze(net_noTDA_control,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 01.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
summary(props_noTDA_control)
plot(props_noTDA_control,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("No TDA", "Control"),
hubBorderCol  = "gray40")
