for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# checking for TDA
if(metadata_metabolomics$System[metaDataRow]=="TDA"){tdaBin="P"}else{tdaBin="D"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
#}
}
# inserting the correct names
rownames(df_metab_tmp1) = metab_new_names
View(df_metab_tmp1)
metab_new_names
for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# ensuring no medium control (blank samples)
if (metadata_metabolomics$Additional.names != "Medium control"){
# checking for TDA or control
if(metadata_metabolomics$System[metaDataRow]=="TDA"){
tdaBin="P"
} else if (metadata_metabolomics$System[metaDataRow]=="noTDA"){
tdaBin="D"
} else {tdaBin="C"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
}
metab_new_names
for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# ensuring no medium control (blank samples)
if (metadata_metabolomics$Additional.names[metaDataRow] != "Medium control"){
# checking for TDA or control
if(metadata_metabolomics$System[metaDataRow]=="TDA"){
tdaBin="P"
} else if (metadata_metabolomics$System[metaDataRow]=="noTDA"){
tdaBin="D"
} else {tdaBin="C"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
}
metab_new_names
i = 1
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# ensuring no medium control (blank samples)
if (!(num_grep==449||num_grep==458)){
# checking for TDA or control
if(metadata_metabolomics$System[metaDataRow]=="TDA"){
tdaBin="P"
} else if (metadata_metabolomics$System[metaDataRow]=="noTDA"){
tdaBin="D"
} else {tdaBin="C"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
i = 2
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# ensuring no medium control (blank samples)
if (!(num_grep==449||num_grep==458)){
# checking for TDA or control
if(metadata_metabolomics$System[metaDataRow]=="TDA"){
tdaBin="P"
} else if (metadata_metabolomics$System[metaDataRow]=="noTDA"){
tdaBin="D"
} else {tdaBin="C"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
i = 40
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# ensuring no medium control (blank samples)
if (!(num_grep==449||num_grep==458)){
# checking for TDA or control
if(metadata_metabolomics$System[metaDataRow]=="TDA"){
tdaBin="P"
} else if (metadata_metabolomics$System[metaDataRow]=="noTDA"){
tdaBin="D"
} else {tdaBin="C"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
}
metab_new_names
# inserting the correct names
rownames(df_metab_tmp1) = metab_new_names
which(gsub("-NA-", metab_new_names))
which(gsub("-NA-", x = metab_new_names))
which(gsub("-NA-", x = metab_new_names, replacement = "", perl = TRUE))
gsub("-NA-", x = metab_new_names, replacement = "", perl = TRUE)
which(gsub("-NA-", x = metab_new_names, replacement = "", perl = TRUE))
which(gsub("-NA-", x = metab_new_names, replacement = "", perl = TRUE)=="DNA")
# removing samples with NA
whichNaNRemove  <- which(gsub("-NA-", x = metab_new_names, replacement = "", perl = TRUE)=="DNA")
metab_new_names <- metab_new_names[-whichNaNRemove]
df_metab_tmp1   <- df_metab_tmp1[-whichNaNRemove,]
# inserting the correct names
rownames(df_metab_tmp1) = metab_new_names
metab_new_names
sort(metab_new_names)
View(metadata_metabolomics)
# running through the names, matching them with phyloseq naming
metab_new_names <- rownam_samples_metab
for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# ensuring no medium control (blank samples)
if (!(num_grep==449||num_grep==458)){
# checking for TDA or control
if(metadata_metabolomics$System[metaDataRow]=="TDA"){
tdaBin="P"
} else if (metadata_metabolomics$System[metaDataRow]=="NoTDA"){
tdaBin="D"
} else {tdaBin="C"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
}
# removing samples with NA
whichNaNRemove  <- which(gsub("-NA-", x = metab_new_names, replacement = "", perl = TRUE)=="DNA")
metab_new_names <- metab_new_names[-whichNaNRemove]
df_metab_tmp1   <- df_metab_tmp1[-whichNaNRemove,]
# inserting the correct names
rownames(df_metab_tmp1) = metab_new_names
metab_new_names
# running through the names, matching them with phyloseq naming
metab_new_names <- rownam_samples_metab
for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# ensuring no medium control (blank samples)
if (!(num_grep==449||num_grep==458)){
# checking for TDA or control
if(metadata_metabolomics$System[metaDataRow]=="TDA"){
tdaBin="P"
} else if (metadata_metabolomics$System[metaDataRow]=="NoTDA"){
tdaBin="D"
} else {tdaBin="C"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
}
metab_new_names
# removing samples with NA
whichNaNRemove  <- which(gsub("MCCe", x = metab_new_names, replacement = "", perl = TRUE)=="DNA")
whichNaNRemove
# removing samples with NA
whichNaNRemove  <- which(gsub("MCCe", x = metab_new_names, replacement = "", perl = TRUE)==TRUE)
# removing samples with NA
#whichNaNRemove  <- which(gsub("MCCe", x = metab_new_names, replacement = "", perl = TRUE)==TRUE)
whichNaNRemove  <- c(1,10)
metab_new_names <- metab_new_names[-whichNaNRemove]
df_metab_tmp1   <- df_metab_tmp1[-whichNaNRemove,]
# inserting the correct names
rownames(df_metab_tmp1) = metab_new_names
metab_new_names
# transposing the data frame
df_metab_tmp1 = as.data.frame(t(df_metab_numOnly))
df_metab_tmp1   <- df_metab_tmp1[-whichNaNRemove,]
# inserting the correct names
rownames(df_metab_tmp1) = metab_new_names
rm(list=ls())
df_metab_original <- read.csv("Data/Nath_algal_community_MZmine_12072022_legacy export.csv", header = TRUE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE)
df_metab_numOnly = read.csv("Data/Nath_algal_community_MZmine_12072022_legacy export_numOnly.csv", header = FALSE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE, fill = TRUE)
# naming columns and rows
colnames(df_metab_numOnly) = colnames(df_metab_original)[-1]
rownames(df_metab_numOnly) = df_metab_original[,1]
# transposing the data frame
df_metab_tmp1 = as.data.frame(t(df_metab_numOnly))
# loading in metadata metabolomics sheet - changed data to .csv first, to make it work
metadata_metabolomics  <- read.csv("Data/Metadata-metabolomics_toUseCSV.csv", fill = TRUE, header = TRUE, sep = ";")
# fetching two first rows / names
rownam_samples_metab  <- rownames(df_metab_tmp1)
# running through the names, matching them with phyloseq naming
metab_new_names <- rownam_samples_metab
for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# ensuring no medium control (blank samples)
if (!(num_grep==449||num_grep==458)){
# checking for TDA or control
if(metadata_metabolomics$System[metaDataRow]=="TDA"){
tdaBin="P"
} else if (metadata_metabolomics$System[metaDataRow]=="NoTDA"){
tdaBin="D"
} else {tdaBin="C"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
}
# removing samples with NA
#whichNaNRemove  <- which(gsub("MCCe", x = metab_new_names, replacement = "", perl = TRUE)==TRUE)
whichNaNRemove  <- c(1,10)
metab_new_names <- metab_new_names[-whichNaNRemove]
df_metab_tmp1   <- df_metab_tmp1[-whichNaNRemove,]
# inserting the correct names
rownames(df_metab_tmp1) = metab_new_names
# removing the additional column with information (1)
df_metab_tmp2 = df_metab_tmp1[,-c(1)]
View(df_metab_tmp2)
View(df_metab_tmp1)
# loading in data
df_metab_original <- read.csv("Data/metabolomic_day7,28,70.csv", header = TRUE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE)
df_metab_numOnly = read.csv("Data/metabolomic_day7,28,70_NumOnly.csv", header = FALSE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE, fill = TRUE)
# naming columns and rows
colnames(df_metab_numOnly) = colnames(df_metab_original)[-1]
rownames(df_metab_numOnly) = df_metab_original[,1]
# transposing the data frame
df_metab_tmp1 = as.data.frame(t(df_metab_numOnly))
df_metab_original <- read.csv("Data/Nath_algal_community_MZmine_12072022_legacy export.csv", header = TRUE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE)
df_metab_numOnly = read.csv("Data/Nath_algal_community_MZmine_12072022_legacy export_numOnly.csv", header = FALSE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE, fill = TRUE)
# naming columns and rows
colnames(df_metab_numOnly) = colnames(df_metab_original)[-1]
rownames(df_metab_numOnly) = df_metab_original[,1]
# transposing the data frame
df_metab_tmp1 = as.data.frame(t(df_metab_numOnly))
# loading in metadata metabolomics sheet - changed data to .csv first, to make it work
metadata_metabolomics  <- read.csv("Data/Metadata-metabolomics_toUseCSV.csv", fill = TRUE, header = TRUE, sep = ";")
# fetching two first rows / names
rownam_samples_metab  <- rownames(df_metab_tmp1)
# running through the names, matching them with phyloseq naming
metab_new_names <- rownam_samples_metab
for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# ensuring no medium control (blank samples)
if (!(num_grep==449||num_grep==458)){
# checking for TDA or control
if(metadata_metabolomics$System[metaDataRow]=="TDA"){
tdaBin="P"
} else if (metadata_metabolomics$System[metaDataRow]=="NoTDA"){
tdaBin="D"
} else {tdaBin="C"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
}
# removing samples with NA
#whichNaNRemove  <- which(gsub("MCCe", x = metab_new_names, replacement = "", perl = TRUE)==TRUE)
whichNaNRemove  <- c()
metab_new_names <- metab_new_names[-whichNaNRemove]
df_metab_tmp1   <- df_metab_tmp1[-whichNaNRemove,]
# inserting the correct names
rownames(df_metab_tmp1) = metab_new_names
# removing samples with NA
#whichNaNRemove  <- which(gsub("MCCe", x = metab_new_names, replacement = "", perl = TRUE)==TRUE)
whichNaNRemove  <- c(1,10)
metab_new_names <- metab_new_names[-whichNaNRemove]
df_metab_tmp1   <- df_metab_tmp1[-whichNaNRemove,]
# inserting the correct names
rownames(df_metab_tmp1) = metab_new_names
df_metab_tmp2   <- df_metab_tmp1[-whichNaNRemove,]
# inserting the correct names
rownames(df_metab_tmp2) = metab_new_names
df_metab_original <- read.csv("Data/Nath_algal_community_MZmine_12072022_legacy export.csv", header = TRUE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE)
df_metab_numOnly = read.csv("Data/Nath_algal_community_MZmine_12072022_legacy export_numOnly.csv", header = FALSE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE, fill = TRUE)
# naming columns and rows
colnames(df_metab_numOnly) = colnames(df_metab_original)[-1]
rownames(df_metab_numOnly) = df_metab_original[,1]
# transposing the data frame
df_metab_tmp1 = as.data.frame(t(df_metab_numOnly))
# loading in metadata metabolomics sheet - changed data to .csv first, to make it work
metadata_metabolomics  <- read.csv("Data/Metadata-metabolomics_toUseCSV.csv", fill = TRUE, header = TRUE, sep = ";")
# fetching two first rows / names
rownam_samples_metab  <- rownames(df_metab_tmp1)
# running through the names, matching them with phyloseq naming
metab_new_names <- rownam_samples_metab
for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# ensuring no medium control (blank samples)
if (!(num_grep==449||num_grep==458)){
# checking for TDA or control
if(metadata_metabolomics$System[metaDataRow]=="TDA"){
tdaBin="P"
} else if (metadata_metabolomics$System[metaDataRow]=="NoTDA"){
tdaBin="D"
} else {tdaBin="C"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
}
# removing samples with NA
#whichNaNRemove  <- which(gsub("MCCe", x = metab_new_names, replacement = "", perl = TRUE)==TRUE)
whichNaNRemove  <- c(1,10)
metab_new_names <- metab_new_names[-whichNaNRemove]
df_metab_tmp2   <- df_metab_tmp1[-whichNaNRemove,]
# inserting the correct names
rownames(df_metab_tmp2) = metab_new_names
# finding the common test IDs, to make a full dataset
commonIDs <- intersect(sampleID.metatax, metab_new_names)
rm(list=ls())
# loading NetCoMi library
library(NetCoMi)
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
# loading data
chosenDataSet     = "metab"       # "metab" or "genom"
chosenTaxonomy    <- "species"    # "species" or "genus"
chosenWeek        <- "null"       # "1", "4", or "10"
chosenCutoffMass  <- 200          # arbitrary value, removing based on column name
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy, cutOffMetabMass=chosenCutoffMass)
chosenNormalization <- "peak"
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization = chosenNormalization)
commonIDs
whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization = chosenNormalization
whichWeek=chosenWeek
whichTaxLevel=chosenTaxonomy
cutOffMetabMass=chosenCutoffMass
whichNormalization = chosenNormalization
# loading data
#data_phys_original  <- readRDS("Data/allDataMetataxonomicNCLTEE.rds")
load("Data/ps.asv.reduced.wTree.RData")
data_phys_original <- ps.new
# The actual data
df.otu.metatax      <- as.data.frame(data_phys_original@otu_table)
# The results / variables
df.tax.metatax      <- as.data.frame(data_phys_original@tax_table)
# The sample IDs
sampleID.metatax    <- data_phys_original@sam_data$sample.name
## setting up dataframe similar to Katrines
df.fulldata.metax <- as.data.frame(t(df.otu.metatax))
rownames(df.fulldata.metax) = sampleID.metatax
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",str_replace_na(df.tax.metatax$domain, replacement="NA"),"_",
str_replace_na(df.tax.metatax$phylum,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$class,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$order,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$family,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$genus,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$species, replacement="NA"))
colnames(df.fulldata.metax) = colnames_array_metatax
# saving information on phaeobacter presence
array.phaebac.bin <- data_phys_original@sam_data$phaeobacter
# moving up to genus level or staying at species
if (whichTaxLevel=="genus") {
# moving up in taxonomy for the 16s data, going from species to genus
origNames <- colnames(df.fulldata.metax)
newNames <- apply(str_split_fixed(string = origNames, pattern = "[_]",7)[,1:6],1, paste, collapse="_")
length(unique(newNames))
uniqNames=unique(newNames)
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
newDat=newDat[,-1]
colnames(newDat)=uniqNames
# now making that new data into 16s data set
df.fulldata.metax = newDat
}
#df.full.metax <- cbind(array.phaebac.bin,df.fulldata.metax)
df.full.metax <- df.fulldata.metax
df_metab_original <- read.csv("Data/Nath_algal_community_MZmine_12072022_legacy export.csv", header = TRUE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE)
df_metab_numOnly = read.csv("Data/Nath_algal_community_MZmine_12072022_legacy export_numOnly.csv", header = FALSE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE, fill = TRUE)
# naming columns and rows
colnames(df_metab_numOnly) = colnames(df_metab_original)[-1]
rownames(df_metab_numOnly) = df_metab_original[,1]
# transposing the data frame
df_metab_tmp1 = as.data.frame(t(df_metab_numOnly))
# loading in metadata metabolomics sheet - changed data to .csv first, to make it work
metadata_metabolomics  <- read.csv("Data/Metadata-metabolomics_toUseCSV.csv", fill = TRUE, header = TRUE, sep = ";")
# fetching two first rows / names
rownam_samples_metab  <- rownames(df_metab_tmp1)
# running through the names, matching them with phyloseq naming
metab_new_names <- rownam_samples_metab
for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
#if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# ensuring no medium control (blank samples)
if (!(num_grep==449||num_grep==458)){
# checking for TDA or control
if(metadata_metabolomics$System[metaDataRow]=="TDA"){
tdaBin="P"
} else if (metadata_metabolomics$System[metaDataRow]=="NoTDA"){
tdaBin="D"
} else {tdaBin="C"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
}
# removing samples with NA
#whichNaNRemove  <- which(gsub("MCCe", x = metab_new_names, replacement = "", perl = TRUE)==TRUE)
whichNaNRemove  <- c(1,10)
metab_new_names <- metab_new_names[-whichNaNRemove]
df_metab_tmp2   <- df_metab_tmp1[-whichNaNRemove,]
# inserting the correct names
rownames(df_metab_tmp2) = metab_new_names
# finding the common test IDs, to make a full dataset
commonIDs <- intersect(sampleID.metatax, metab_new_names)
# removing all features with masses <= 200 m/Z (mass over charge)
metabFeatToDrop <- which(as.numeric(colnames(df_metab_tmp2)) <= cutOffMetabMass)
df_metab_tmp3   <- subset(df_metab_tmp2, select = -c(metabFeatToDrop))
data_metab = df_metab_tmp3
data_metax = df.full.metax
# only keeping the relevant testIDs
df_metab = data_metab[metab_new_names %in% commonIDs,]
df_metax = data_metax[sampleID.metatax %in% commonIDs,]
commonIDs
## normalization of the metabolomic LCMS data
if (whichNormalization == "peak") {
# normalizing the metabolomic data, percentage-based according to max peak per feature
### OBS COMMENT: Maybe we need to normalize per median ###
df_metab_tmp4 = as.data.frame(apply(df_metab,MARGIN = 2, function(x){x/max(x)}))
} else if (whichNormalization == "median") {
# normalizing per median (actually by MAD, median absolute deviation)
df_metab_tmp4 = as.data.frame(apply(df_metab, MARGIN = 2, function(x){x/(mad(x, center = median(x), na.rm = FALSE, constant = 1)+1)}))
#df_metab_tmp4 = as.data.frame(apply(df_metab, MARGIN = 2, function(x){x/(median(x)+1)}))
} else {
print("No correct normalization were chosen, no normalization performed.\n Enter either: 'median' or 'peak'")
}
View(df_metab)
df_metab[2,2]
as.numeric(df_metab[2,2])
View(df_metab_numOnly)
