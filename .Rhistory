verbose = 3,
seed = 123456)
props_single_fullSet <- netAnalyze(net_single_fullSet,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
#?summary.microNetProps
summary(props_single_fullSet, numbNodes = 5L)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
legend(x=0.85,y=0.9,legend=c("Positive","Negative"),
cex=0.6,col=c("green","red"),pch=c(".","."),lwd = c(3,3))
legend(x=0.85,y=0.6,legend=c("Metataxonomic","Genomic"),
cex=0.6,col=c("green","red"),pch=c(16,16),lwd = c(3,3))
# loading data
chosenWeek      <- "Week 06"
chosenTaxonomy  <- "species"
inData <- extracting_data_KAT(whichWeek = chosenWeek, whichTaxLevel = chosenTaxonomy)
# filtering data
inData <- data_filtering(inData)
inData <- extracting_data_KAT(whichWeek = chosenWeek, whichTaxLevel = chosenTaxonomy)
# filtering data
inData <- data_filtering(inData)
# loading data
chosenWeek      <- "Week 06"
chosenTaxonomy  <- "genus"
inData <- extracting_data_KAT(whichWeek = chosenWeek, whichTaxLevel = chosenTaxonomy)
# filtering data
inData <- data_filtering(inData)
# excluding testID and OUA (antibiotics used or not)
#inData = data
testID  <- inData$testID
OUA     <- inData$OUA
data = subset(inData, select = -c(testID, OUA))
dataOneColumns <- grep(x = colnames(data), pattern = "DATA.*")
colVector <- 1:length(colnames(data))
for (i in 1:length(colVector)) {
if (i<=max(dataOneColumns)) {colVector[i] = "green"} else {colVector[i] = "red"}
}
if (chosenTaxonomy=="genus"){
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
} else {
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
}
# building single network with SPRING as association measure - Full dataset, both treated and untreated
net_single_fullSet <- netConstruct(data,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.6,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single_fullSet <- netAnalyze(net_single_fullSet,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
#?summary.microNetProps
summary(props_single_fullSet, numbNodes = 5L)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
legend(x=0.85,y=0.9,legend=c("Positive","Negative"),
cex=0.6,col=c("green","red"),pch=c(".","."),lwd = c(3,3))
legend(x=0.85,y=0.6,legend=c("Metataxonomic","Genomic"),
cex=0.6,col=c("green","red"),pch=c(16,16),lwd = c(3,3))
# network untreated, single network with spearman association
data_untreated <- data[which(OUA==0),]
net_single_untreated <- netConstruct(data_untreated,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.6,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single_untreated <- netAnalyze(net_single_untreated,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
plot(props_single_untreated,
labelScale = F,
cexLabels = 1.3,
title1 = paste("Single network with Spearman, untreated", chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
legend(x=0.85,y=0.9,legend=c("Metataxonomic","Genomic"),
cex=0.6,col=c("green","red"),pch=c(16,16),lwd = c(3,3))
data_qpcr_original <- read.table("Data/allData_qPCR_cleaned.txt")
if(!requireNamespace("BiocManager")){
install.packages("BiocManager")
}
BiocManager::install("phyloseq")
data_phys_original  <- readRDS("Data/allDataMetataxonomicNCLTEE.rds")
View(data_phys_original)
data_phys_original.otu_tablle
data_phys_original.otu_table
View(data_phys_original)
data_phys_original[otu_table()]
phys.data <- as.data.frame(sample_data(data_phys_original))
phys.data
View(phys.data)
data_phys_original@otu_table
phys.data <- as.data.frame(sample_data(data_phys_original@otu_table))
data_phys_original@otu_table
data_phys_original@tax_table
data_phys_original@otu_table
View(data_phys_original@otu_table)
View(data_phys_original@tax_table)
View(data_phys_original@sam_data)
View(data_phys_original@refseq)
View(data_phys_original@refseq@pool)
View(data_phys_original@phy_tree)
ps.otu.metatax      <- data_phys_original@otu_table
ps.tax.metatax      <- data_phys_original@tax_table
ps.otu.metatax
df.otu.metatax      <- data_phys_original@otu_table
df.tax.metatax      <- data_phys_original@tax_table
View(data_phys_original@otu_table)
View(data_phys_original@tax_table)
View(data_phys_original)
data_16s_original  <- read.table("Data/allData_16S_cleaned.txt")
View(data_16s_original)
data_phys_original@sam_data@names
data_phys_original@sam_data@row.names
data_phys_original@sam_data@sample.name
data_phys_original@sam_data@sample.name
data_phys_original@sam_data$sample.name
# The sample IDs
sampleID.metatax    <- data_phys_original@sam_data$sample.name
length(sampleID.metatax)
length(df.otu.metatax)
length(as.data.frame(df.otu.metatax))
length(as.data.frame(df.otu.metatax)[1,])
length(as.data.frame(df.otu.metatax)[,1])
# The actual data
df.otu.metatax      <- as.data.frame(data_phys_original@otu_table)
# The results / variables
df.tax.metatax      <- as.data.frame(data_phys_original@tax_table)
# The sample IDs
sampleID.metatax    <- data_phys_original@sam_data$sample.name
View(df.tax.metatax)
sort(sampleID.metatax)
sort(sampleID.metatax, decreasing = FALSE)
## setting up dataframe similar to Katrines
df.temp1 = t(df.otu.metatax)
## setting up dataframe similar to Katrines
df.temp1 = as.data.frame(t(df.otu.metatax))
rownames(df.temp1) = sampleID.metatax
View(data_16s_original)
colnames(df.temp1) = "DATA."+df.tax.metatax$domain+"_"
?colnames
str_c("DATA.",df.tax.metatax$domain,"_",df.tax.metatax$phylum,"_")
install.packages("str_c")
install.packages("strings")
install.packages("string")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
library(phyloseq)
library(stringr)
str_c("DATA.",df.tax.metatax$domain,"_",df.tax.metatax$phylum,"_")
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",df.tax.metatax$domain,"_",df.tax.metatax$phylum,"_",
df.tax.metatax$class,"_",df.tax.metatax$order,"_",
df.tax.metatax$family,"_",df.tax.metatax$genus,".",
df.tax.metatax$species)
colnames(df.temp1) = colnames_array_metatax
df.temp1
View(df.temp1)
View(colnames_array_metatax)
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",df.tax.metatax$domain,"_",df.tax.metatax$phylum,"_",
df.tax.metatax$class,"_",df.tax.metatax$order,"_",
df.tax.metatax$family,"_",df.tax.metatax$genus,".",
df.tax.metatax$species,collapse = NULL)
colnames(df.temp1) = colnames_array_metatax
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",df.tax.metatax$domain,"_",df.tax.metatax$phylum,"_",
df.tax.metatax$class,"_",df.tax.metatax$order,"_",
df.tax.metatax$family,"_",df.tax.metatax$genus,".",
df.tax.metatax$species,collapse = collapse)
df.tax.metatax[1]
df.tax.metatax[1,]
View(df.tax.metatax)
length(which(df.tax.metatax$species != "<NA>"))
length(which(colnames(df.temp1) != "")
length(which(colnames(df.temp1) != ""))
length(which(df.tax.metatax$species != "<NA>"))
length(which(df.tax.metatax$species != "<NA>"))
length(which(df.tax.metatax$species != "<NA>"))
?str_c
?str_replace
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",df.tax.metatax$domain,"_",df.tax.metatax$phylum,"_",
df.tax.metatax$class,"_",df.tax.metatax$order,"_",
df.tax.metatax$family,"_",df.tax.metatax$genus,".",
df.tax.metatax$species,str_replace("<NA>","NA"))
colnames_array_metatax = str_replace_na(colnames_array_metatax, replacement = "NA")
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",df.tax.metatax$domain,"_",df.tax.metatax$phylum,"_",
df.tax.metatax$class,"_",df.tax.metatax$order,"_",
df.tax.metatax$family,"_",df.tax.metatax$genus,".",
df.tax.metatax$species)
colnames_array_metatax = str_replace_na(colnames_array_metatax, replacement = "NA")
colnames(df.temp1) = colnames_array_metatax
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",str_replace_na(df.tax.metatax$domain, replacement="NA"),"_",
str_replace_na(df.tax.metatax$phylum, replacement="NA"),"_",
str_replace_na(df.tax.metatax$class, replacement="NA"),"_",
str_replace_na(df.tax.metatax$order, replacement="NA"),"_",
str_replace_na(df.tax.metatax$family, replacement="NA"),"_",
str_replace_na(df.tax.metatax$genus, replacement="NA"),".",
str_replace_na(df.tax.metatax$species, replacement="NA"))
colnames(df.temp1) = colnames_array_metatax
length(which(df.tax.metatax$species != "<NA>"))
length(which(colnames(df.temp1) != ""))
View(df.temp1)
View(data_phys_original)
View(data_phys_original$sam_data)
View(data_phys_original@sam_data)
length(data_phys_original@sam_data$phaeobacter)
length(data_phys_original@sam_data$phaeobacter==1)
length(data_phys_original@sam_data$phaeobacter==0)
length(which(data_phys_original@sam_data$phaeobacter==0))
length(which(data_phys_original@sam_data$phaeobacter==1))
# saving information on phaeobacter presence
array.phaebac.bin <- data_phys_original@sam_data$phaeobacter
## setting up dataframe similar to Katrines
df.fulldata.metax <- as.data.frame(t(df.otu.metatax))
rownames(df.fulldata.metax) = sampleID.metatax
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",str_replace_na(df.tax.metatax$domain, replacement="NA"),"_",
str_replace_na(df.tax.metatax$phylum,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$class,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$order,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$family,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$genus,   replacement="NA"),".",
str_replace_na(df.tax.metatax$species, replacement="NA"))
colnames(df.fulldata.metax) = colnames_array_metatax
# saving information on phaeobacter presence
array.phaebac.bin <- data_phys_original@sam_data$phaeobacter
df.full.metax <- cbind(array.phaebac.bin,df.fulldata.metax)
View(df.full.metax)
?str_split_fixed
# moving up to genus level or staying at species
whichTaxLevel <- "genus"
if (whichTaxLevel=="genus") {
# moving up in taxonomy for the 16s data, going from species to genus
origNames <- colnames(df.fulldata.metax)
newNames <- apply(str_split_fixed(string = origNames, pattern = "_",8)[,1:6],1, paste, collapse="_")
length(unique(newNames))
uniqNames=unique(newNames)
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
newDat=newDat[,-1]
colnames(newDat)=uniqNames
# now making that new data into 16s data set
df.fulldata.metax = newDat
}
View(data_16s_original)
# moving up in taxonomy for the 16s data, going from species to genus
origNames <- colnames(df.fulldata.metax)
newNames <- apply(str_split_fixed(string = origNames, pattern = "[._]",8)[,1:6],1, paste, collapse="_")
View(newNames)
length(unique(newNames))
uniqNames=unique(newNames)
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
newDat=newDat[,-1]
colnames(newDat)=uniqNames
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
View(newDat)
# moving up in taxonomy for the 16s data, going from species to genus
origNames <- colnames(df.fulldata.metax)
newNames <- apply(str_split_fixed(string = origNames, pattern = "[._]",8)[,1:7],1, paste, collapse="_")
length(unique(newNames))
uniqNames=unique(newNames)
head(uniqNames, 5)
newNames <- apply(str_split_fixed(string = origNames, pattern = "[_]",8)[,1:7],1, paste, collapse="_")
length(unique(newNames))
uniqNames=unique(newNames)
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
head(uniqNames, 5)
newNames <- apply(str_split_fixed(string = origNames, pattern = "[_]",8)[,1:6],1, paste, collapse="_")
length(unique(newNames))
uniqNames=unique(newNames)
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
length(unique(newNames))
head(uniqNames, 5)
?rowSums
library(gsubfn)
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
newDat=newDat[,-1]
colnames(newDat)=uniqNames
# now making that new data into 16s data set
df.fulldata.metax = newDat
View(df.fulldata.metax)
# loading data
data_phys_original  <- readRDS("Data/allDataMetataxonomicNCLTEE.rds")
# The actual data
df.otu.metatax      <- as.data.frame(data_phys_original@otu_table)
# The results / variables
df.tax.metatax      <- as.data.frame(data_phys_original@tax_table)
# The sample IDs
sampleID.metatax    <- data_phys_original@sam_data$sample.name
## setting up dataframe similar to Katrines
df.fulldata.metax <- as.data.frame(t(df.otu.metatax))
rownames(df.fulldata.metax) = sampleID.metatax
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",str_replace_na(df.tax.metatax$domain, replacement="NA"),"_",
str_replace_na(df.tax.metatax$phylum,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$class,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$order,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$family,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$genus,   replacement="NA"),".",
str_replace_na(df.tax.metatax$species, replacement="NA"))
colnames(df.fulldata.metax) = colnames_array_metatax
# saving information on phaeobacter presence
array.phaebac.bin <- data_phys_original@sam_data$phaeobacter
# moving up to genus level or staying at species
whichTaxLevel <- "genus"
if (whichTaxLevel=="genus") {
# moving up in taxonomy for the 16s data, going from species to genus
origNames <- colnames(df.fulldata.metax)
newNames <- apply(str_split_fixed(string = origNames, pattern = "[_]",8)[,1:6],1, paste, collapse="_")
length(unique(newNames))
uniqNames=unique(newNames)
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
newDat=newDat[,-1]
colnames(newDat)=uniqNames
# now making that new data into 16s data set
df.fulldata.metax = newDat
}
head(uniqNames, 10)
head(newNames, 5)
head(origNames, 3)
View(df.tax.metatax)
str_split_fixed(string = origNames[1:3], pattern = "[_]",8)
str_split_fixed(string = origNames[1:3], pattern = "[_]",7)
str_split_fixed(string = origNames[1:3], pattern = "[_]",6)
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",str_replace_na(df.tax.metatax$domain, replacement="NA"),"_",
str_replace_na(df.tax.metatax$phylum,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$class,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$order,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$family,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$genus,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$species, replacement="NA"))
colnames(df.fulldata.metax) = colnames_array_metatax
# saving information on phaeobacter presence
array.phaebac.bin <- data_phys_original@sam_data$phaeobacter
# moving up to genus level or staying at species
whichTaxLevel <- "genus"
# moving up in taxonomy for the 16s data, going from species to genus
origNames <- colnames(df.fulldata.metax)
str_split_fixed(string = origNames[1:3], pattern = "[_]",6)
str_split_fixed(string = origNames[1:3], pattern = "[_]",7)
str_split_fixed(string = origNames[1:3], pattern = "[_]",8)
str_split_fixed(string = origNames[1:3], pattern = "[_]",7)
str_split_fixed(string = origNames[1:3], pattern = "[_]",7)[1:6]
str_split_fixed(string = origNames[1:3], pattern = "[_]",7)[,1:6]
# moving up in taxonomy for the 16s data, going from species to genus
origNames <- colnames(df.fulldata.metax)
newNames <- apply(str_split_fixed(string = origNames, pattern = "[_]",7)[,1:6],1, paste, collapse="_")
length(unique(newNames))
uniqNames=unique(newNames)
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
newDat=newDat[,-1]
colnames(newDat)=uniqNames
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
rowSums
?rowSums
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
uniqNames
length(unique(uniqNames))
length(which(df.tax.metatax$domain)=="<NA>")
length(which(df.tax.metatax$domain=="<NA>"))
length(which(df.tax.metatax$phylum=="<NA>"))
length(which(df.tax.metatax$class=="<NA>"))
length(which(df.tax.metatax$order=="<NA>"))
length(which(df.tax.metatax$family=="<NA>"))
length(which(df.tax.metatax$genus=="<NA>"))
length(which(df.tax.metatax$species=="<NA>"))
View(df.tax.metatax)
df.tax.metatax[1]
df.tax.metatax[1,]
length(which(df.tax.metatax$species==<NA>))
length(which(df.tax.metatax$species=="<NA>""))
length(which(df.tax.metatax$species=="<NA>"))
length(which(df.tax.metatax$species != "<NA>"))
length(which(df.tax.metatax$species == "<NA>"))
length(which(df.tax.metatax$species != "<NA>"))
length(which(df.tax.metatax$phylum != "<NA>"))
length(which(df.tax.metatax$domain != "<NA>"))
length(which(df.tax.metatax$class != "<NA>"))
length(which(df.tax.metatax$order != "<NA>"))
length(which(df.tax.metatax$family != "<NA>"))
length(which(df.tax.metatax$genus != "<NA>"))
length(which(df.tax.metatax$species != "<NA>"))
# moving up to genus level or staying at species
whichTaxLevel <- "species"
if (whichTaxLevel=="genus") {
# moving up in taxonomy for the 16s data, going from species to genus
origNames <- colnames(df.fulldata.metax)
newNames <- apply(str_split_fixed(string = origNames, pattern = "[_]",7)[,1:6],1, paste, collapse="_")
length(unique(newNames))
uniqNames=unique(newNames)
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
newDat=newDat[,-1]
colnames(newDat)=uniqNames
# now making that new data into 16s data set
df.fulldata.metax = newDat
}
df.full.metax <- cbind(array.phaebac.bin,df.fulldata.metax)
