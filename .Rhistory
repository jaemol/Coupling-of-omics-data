chosenWeek <- "Week 02"
inData <- extracting_data_KAT(whichWeek = chosenWeek)
# filtering data
inData <- data_filtering(inData)
View(inData)
# excluding testID and OUA (antibiotics used or not)
#inData = data
testID  <- inData$testID
OUA     <- inData$OUA
inData = subset(inData, select = -c(testID, OUA))
colnames(inData) <- testID
rownames(inData) <- testID
source("Function.R")
source("Programming/Function.R")
source("Programming/Functions.R")
# making DBSCAN model
inDataScale=data.frame(scale(inData, center = T, scale = T))
findEpsi(t(inDataScale), minRange = 30, maxRange = 32, steps = .1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 5, maxRange = 10, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 5, maxRange = 10, steps = .1 ,maxY=20,minP = 3)
DB=dbscan::dbscan(t(inDataScale),9.1,3)
clusVars=data.frame(Clus=DB$cluster,Vars=colnames(inDataScale))
DB
subset(clusVars, Clus==1)
subset(clusVars, Clus==2)
plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
log1p(inData$Increp64))
subset(clusVars, Clus==3)
subset(clusVars, Clus==4)
subset(clusVars, Clus==5)
unique(data_qpcr$SAMPLEWEEK)
sort(unique(data_qpcr$SAMPLEWEEK))
sort(unique(data_16s$SAMPLEWEEK))
subset(clusVars, Clus==1)
subset(clusVars, Clus==2)
subset(clusVars, Clus==3)
DB
subset(clusVars, Clus==4)
subset(clusVars, Clus==5)
subset(clusVars, Clus==5)[1]
subset(clusVars, Clus==5)[2]
subset(clusVars, Clus==5)[2][1]
subset(clusVars, Clus==5)[2][1][1]
subset(clusVars, Clus==5)[1,1]
subset(clusVars, Clus==5)[2,1]
subset(clusVars, Clus==5)[2,2]
subset(clusVars, Clus==5)[1,2]
sub <- subset(clusVars, Clus==5); print(sub)
View(sub)
sub[1,2]
#plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
#    log1p(inData$Increp64))
plot(log1p(inData$sub[1,2]))
#plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
#    log1p(inData$Increp64))
plot(log1p(inData$noquote(sub[1,2]))
#plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
#    log1p(inData$Increp64))
plot(log1p(inData$noquote(sub[1,2]), inData$noquote(sub[1,5]))
#plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
#    log1p(inData$Increp64))
plot(log1p(inData$noquote(sub[1,2])), log1p(inData$noquote(sub[1,5])))
sub[1,5]
sub[1,4]
sub[5,2]
#plot(log1p(inData$DATA.Bacteria_Proteobacteria_Gammaproteobacteria_Enterobacterales_Enterobacteriaceae_Escherichia.Shigella),
#    log1p(inData$Increp64))
plot(log1p(inData$noquote(sub[1,2])), log1p(inData$noquote(sub[5,2])))
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==6)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==7)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==8)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==9)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==0)
# loading data
chosenWeek <- "Week 04"
inData <- extracting_data_KAT(whichWeek = chosenWeek)
# filtering data
inData <- data_filtering(inData)
# excluding testID and OUA (antibiotics used or not)
#inData = data
testID  <- inData$testID
OUA     <- inData$OUA
inData = subset(inData, select = -c(testID, OUA))
rownames(inData) <- testID
# making DBSCAN model
inDataScale=data.frame(scale(inData, center = T, scale = T))
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 5)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 2)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 1)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 2)
findEpsi(t(inDataScale), minRange = 0, maxRange = 60, steps = 1 ,maxY=100,minP = 3)
findEpsi(t(inDataScale), minRange = 8, maxRange = 11, steps = .1 ,maxY=15,minP = 3)
DB=dbscan::dbscan(t(inDataScale),8.7,3)
DB=dbscan::dbscan(t(inDataScale),8.7,3); print(DB)
clusVars=data.frame(Clus=DB$cluster,Vars=colnames(inDataScale))
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==5)
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
library(NetCoMi)
installNetCoMiPacks("SpiecEasi")
?installNetCoMiPacks
install.packages(c("ade4", "BiocManager", "blob", "broom", "car", "checkmate", "crayon", "DEoptimR", "dplyr", "DT", "fansi", "future", "future.apply", "ggplot2", "globals", "haven", "httr", "igraph", "kernlab", "knitr", "lme4", "magrittr", "maptools", "multcomp", "nloptr", "openssl", "paradox", "parallelly", "plyr", "polynom", "processx", "ps", "quantreg", "RColorBrewer", "Rcpp", "RcppEigen", "readxl", "rmarkdown", "robustbase", "rprojroot", "sass", "scales", "sp", "testthat", "TH.data", "tibble", "tinytex", "tzdb", "uuid", "vctrs", "vegan", "xfun", "zoo"))
# loading library
library(NetCoMi)
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
# loading library
library(NetCoMi)
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
?installNetCoMiPacks()
# loading library
library(NetCoMi)
install.packages("chebpol")
rm(list=ls())
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
install.packages(c("mclust", "nloptr"))
# loading library
library(NetCoMi)
if(!requireNamespace("BiocManager", quietly = TRUE)){
utils::install.packages("BiocManager")
}
BiocManager::install(pkgs = c("Biobase", "doSNOW", "fdrtool", "filematrix",
"foreach", "graphics", "grDevices", "gtools",
"huge", "igraph", "MASS", "Matrix", "phyloseq",
"pulsar", "qgraph", "Rdpack", "snow", "SPRING",
"stats", "utils", "vegan", "WGCNA"))
devtools::install_github("GraceYoon/SPRING")
devtools::install_github("zdk123/SpiecEasi")
devtools::install_github("stefpeschel/NetCoMi",
dependencies = c("Depends", "Imports"),
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi",
dependencies = c("Depends", "Imports"),
repos = c("http://cloud.r-project.org/",
BiocManager::repositories()))
BiocManager::install(pkgs = c("Biobase", "doSNOW", "fdrtool", "filematrix",
"foreach", "graphics", "grDevices", "gtools",
"huge", "igraph", "MASS", "Matrix", "phyloseq",
"pulsar", "qgraph", "Rdpack", "snow", "SPRING",
"stats", "utils", "vegan", "WGCNA"))
devtools::install_github("GraceYoon/SPRING")
if(!requireNamespace("BiocManager", quietly = TRUE)){
utils::install.packages("BiocManager")
}
BiocManager::install(pkgs = c("Biobase", "doSNOW", "fdrtool", "filematrix",
"foreach", "graphics", "grDevices", "gtools",
"huge", "igraph", "MASS", "Matrix", "phyloseq",
"pulsar", "qgraph", "Rdpack", "snow", "SPRING",
"stats", "utils", "vegan", "WGCNA"))
BiocManager::install(pkgs = c("Biobase", "doSNOW", "fdrtool", "filematrix",
"foreach", "graphics", "grDevices", "gtools",
"huge", "igraph", "MASS", "Matrix", "phyloseq",
"pulsar", "qgraph", "Rdpack", "snow", "SPRING",
"stats", "utils", "vegan", "WGCNA"), type = "binary")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
#install.packages("devtools")
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
devtools::install_github("stefpeschel/NetCoMi", dependencies = TRUE,
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
install.packages("mixedCCA")
install.packages("SPRING")
devtools::install_github("irinagain/mixedCCA")
install.packages("latentcor")
library(SpiecEasi)
library(SPRING)
library(mixedCCA)
library(NetCoMi)
if(!requireNamespace("BiocManager", quietly = TRUE)){
utils::install.packages("BiocManager")
}
BiocManager::install(pkgs = c("Biobase", "doSNOW", "fdrtool", "filematrix",
"foreach", "graphics", "grDevices", "gtools",
"huge", "igraph", "MASS", "Matrix", "phyloseq",
"pulsar", "qgraph", "Rdpack", "snow", "SPRING",
"stats", "utils", "vegan", "WGCNA"))
devtools::install_github("GraceYoon/SPRING")
devtools::install_github("zdk123/SpiecEasi")
devtools::install_github("stefpeschel/NetCoMi",
dependencies = c("Depends", "Imports"),
repos = c("https://cloud.r-project.org/",
BiocManager::repositories()))
# loading NetCoMi library
library(NetCoMi)
# loading functions
source("Programming/extracting_data_KAT.R")
source("Programming/data_filtering.R")
# loading NetCoMi library
library(NetCoMi)
data_16s_original  <- read.table("Testdata/allData_16S_cleaned.txt")
data_qpcr_original <- read.table("Testdata/allData_qPCR_cleaned.txt")
# loading data
chosenWeek <- "Week 02"
inData <- extracting_data_KAT(whichWeek = chosenWeek)
# filtering data
inData <- data_filtering(inData)
# excluding testID and OUA (antibiotics used or not)
#inData = data
testID  <- inData$testID
OUA     <- inData$OUA
inData = subset(inData, select = -c(testID, OUA))
netData = data("amgut1.filt")
View(amgut1.filt)
size(amgut1.filt)
length(amgut1.filt)
length(amgut1.filt[1,])
length(amgut1.filt[,1])
max(amgut1.filt)
max(inData)
# building single network with SPRING as association measure
net_single <- netConstruct(inData,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 100),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 1000),
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 3,
seed = 123456)
# building single network with SPRING as association measure
net_single <- netConstruct(inData,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 50),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 500),
measure = "spring",
measurePar = list(nlambda=100,
rep.num=100),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 3,
seed = 123456)
# building single network with SPRING as association measure
net_single <- netConstruct(amgut1.filt,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 100),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 1000),
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 3,
seed = 123456)
# building single network with SPRING as association measure
net_single <- netConstruct(amgut1.filt,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 100),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 1000),
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 3,
seed = 123456)
# loading NetCoMi library
library(NetCoMi)
# loading functions
source("Programming/extracting_data_KAT.R")
source("Programming/data_filtering.R")
# loading data
chosenWeek <- "Week 02"
inData <- extracting_data_KAT(whichWeek = chosenWeek)
# filtering data
inData <- data_filtering(inData)
# excluding testID and OUA (antibiotics used or not)
#inData = data
testID  <- inData$testID
OUA     <- inData$OUA
inData = subset(inData, select = -c(testID, OUA))
# building single network with SPRING as association measure
net_single <- netConstruct(amgut1.filt,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 100),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 1000),
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 3,
seed = 123456)
amgut1.filt
# building single network with SPRING as association measure
net_single <- netConstruct(amgut1.filt,
filtTax = "highestFreq",
filtTaxPar = list(highestFreq = 100),
filtSamp = "totalReads",
filtSampPar = list(totalReads = 1000),
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 3,
seed = 123456)
# building single network with SPRING as association measure
net_single <- netConstruct(inData,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spring",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 3,
seed = 123456)
# building single network with SPRING as association measure
net_single <- netConstruct(inData,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "none",
dissFunc = "signed",
verbose = 3,
seed = 123456)
plot(net_single)
props_single <- netAnalyze(net_single,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
plot(props_single)
plot(props_single, labelScale = F, cexLabels = 1)
plot(props_single, labelScale = F, cexLabels = 1, cut = 20)
# building single network with SPRING as association measure
net_single <- netConstruct(inData,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.8,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "threshold",
sparsMethod = "none",
dissFunc = "signed",
verbose = 3,
seed = 123456)
# building single network with SPRING as association measure
net_single <- netConstruct(inData,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.8,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single <- netAnalyze(net_single,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
plot(props_single, labelScale = F, cexLabels = 1)
# building single network with SPRING as association measure
net_single <- netConstruct(inData,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.7,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single <- netAnalyze(net_single,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
plot(props_single, labelScale = F, cexLabels = 1)
# building single network with SPRING as association measure
net_single <- netConstruct(inData,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.6,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single <- netAnalyze(net_single,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
plot(props_single, labelScale = F, cexLabels = 1)
inData
gsub("DATA.Bacteria_[A-Zaz]*_[A-Zaz]*_[A-Zaz]*_[A-Zaz]*_(.*)","\\1",colnames(inData))
gsub("DATA.Bacteria_[A-Za-z]*_[A-Za-z]*_[A-Za-z]*_[A-Za-z]*_(.*)","\\1",colnames(inData))
gsub("DATA.[A-Za-z]*_[A-Za-z]*_[A-Za-z]*_[A-Za-z]*_[A-Za-z]*_(.*)","\\1",colnames(inData))
colnames(inData)=gsub("DATA.Bacteria_[A-Za-z]*_[A-Za-z]*_[A-Za-z]*_[A-Za-z]*_(.*)","\\1",colnames(inData))
# building single network with SPRING as association measure
net_single <- netConstruct(inData,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.6,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single <- netAnalyze(net_single,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
plot(props_single, labelScale = F, cexLabels = 1, )
plot(inData$TolC1, inData$Escherichia.Shigella)
cor(inData$TolC1, inData$Escherichia.Shigella)
cor(inData$TolC1, inData$Escherichia.Shigella)^2
cor(inData$TolC1, inData$Escherichia.Shigella, method = "spear")
