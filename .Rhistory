cexTitle = 3.7,
groupNames = c("No TDA", "TDA"),
hubBorderCol  = "gray40")
dev.off()
cor(data_noTDA$Hoeflea, data_noTDA$`685.43427`, method = "spear")
cor(data_noTDA$Hoeflea, data_noTDA$`685.43427`, method = "pearson")
cor(data_noTDA$Hoeflea, data_noTDA$`685.43427`, method = "spear")
plot(data_noTDA$Hoeflea, data_noTDA$`685.43427`)
############################
# compare two networks differentiated upon presence of TDA or not
# splitting the data set of all weeks into two; TDA and noTDA
data_TDA    <- data[substr(rownames(data), 1, 1) == "D",]
data_noTDA  <- data[substr(rownames(data), 1, 1) == "P",]
# Network construction
net_TDA <- netConstruct(data = data_noTDA,
data2 = data_TDA,
#filtTax = "highestVar",
#filtTaxPar = list(highestVar = 50),
measure = "spearman", thresh = 0.65,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_TDA <- netAnalyze(net_TDA,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
summary(props_TDA)
plot(props_TDA,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("No TDA", "TDA"),
hubBorderCol  = "gray40")
# loading in data
df_metab_original <- read.csv("Data/metabolomic_day7,28,70.csv", header = TRUE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE)
df_metab_numOnly = read.csv("Data/metabolomic_day7,28,70_NumOnly.csv", header = FALSE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE, fill = TRUE)
# naming columns and rows
colnames(df_metab_numOnly) = colnames(df_metab_original)[-1]
rownames(df_metab_numOnly) = df_metab_original[,1][-1]
# transposing the data frame
df_metab_tmp1 = as.data.frame(t(df_metab_numOnly))
# loading in data
df_metab_original <- read.csv("Data/metabolomic_day7,28,70.csv", header = TRUE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE)
df_metab_numOnly = read.csv("Data/metabolomic_day7,28,70_NumOnly.csv", header = FALSE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE, fill = TRUE)
# naming columns and rows
colnames(df_metab_numOnly) = colnames(df_metab_original)[-1]
rownames(df_metab_numOnly) = df_metab_original[,1][-1]
# transposing the data frame
df_metab_tmp1 = as.data.frame(t(df_metab_numOnly))
# loading in metadata metabolomics sheet - changed data to .csv first, to make it work
metadata_metabolomics  <- read.csv("Data/Metadata-metabolomics.csv", fill = TRUE, header = TRUE, sep = ";")
# fetching two first rows / names
rownam_samples_metab  <- rownames(df_metab_tmp1)
addit_info_samples    <- df_metab_original[,1]
# running through the names, matching them with phyloseq naming
metab_new_names <- rownam_samples_metab
for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# checking for TDA
if(metadata_metabolomics$System[metaDataRow]=="TDA"){tdaBin="P"}else{tdaBin="D"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
}
# inserting the correct names
rownames(df_metab_tmp1) = metab_new_names
# removing the additional column with information (1)
df_metab_tmp2 = df_metab_tmp1[,-c(1)]
# finding the common test IDs, to make a full dataset
commonIDs <- intersect(sampleID.metatax, metab_new_names)
data_metab = df_metab_tmp2
data_metax = df.full.metax
# only keeping the relevant testIDs
df_metab = data_metab[metab_new_names %in% commonIDs,]
df_metax = data_metax[sampleID.metatax %in% commonIDs,]
# loading data
#data_phys_original  <- readRDS("Data/allDataMetataxonomicNCLTEE.rds")
load("Data/ps.asv.reduced.wTree.RData")
data_phys_original <- ps.new
# The actual data
df.otu.metatax      <- as.data.frame(data_phys_original@otu_table)
# The results / variables
df.tax.metatax      <- as.data.frame(data_phys_original@tax_table)
# The sample IDs
sampleID.metatax    <- data_phys_original@sam_data$sample.name
## setting up dataframe similar to Katrines
df.fulldata.metax <- as.data.frame(t(df.otu.metatax))
rownames(df.fulldata.metax) = sampleID.metatax
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",str_replace_na(df.tax.metatax$domain, replacement="NA"),"_",
str_replace_na(df.tax.metatax$phylum,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$class,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$order,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$family,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$genus,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$species, replacement="NA"))
colnames(df.fulldata.metax) = colnames_array_metatax
# saving information on phaeobacter presence
array.phaebac.bin <- data_phys_original@sam_data$phaeobacter
# moving up to genus level or staying at species
if (whichTaxLevel=="genus") {
# moving up in taxonomy for the 16s data, going from species to genus
origNames <- colnames(df.fulldata.metax)
newNames <- apply(str_split_fixed(string = origNames, pattern = "[_]",7)[,1:6],1, paste, collapse="_")
length(unique(newNames))
uniqNames=unique(newNames)
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
newDat=newDat[,-1]
colnames(newDat)=uniqNames
# now making that new data into 16s data set
df.fulldata.metax = newDat
}
#df.full.metax <- cbind(array.phaebac.bin,df.fulldata.metax)
df.full.metax <- df.fulldata.metax
whichTaxLevel = "species"
whichWeek = "null"
# loading data
#data_phys_original  <- readRDS("Data/allDataMetataxonomicNCLTEE.rds")
load("Data/ps.asv.reduced.wTree.RData")
data_phys_original <- ps.new
# The actual data
df.otu.metatax      <- as.data.frame(data_phys_original@otu_table)
# The results / variables
df.tax.metatax      <- as.data.frame(data_phys_original@tax_table)
# The sample IDs
sampleID.metatax    <- data_phys_original@sam_data$sample.name
## setting up dataframe similar to Katrines
df.fulldata.metax <- as.data.frame(t(df.otu.metatax))
rownames(df.fulldata.metax) = sampleID.metatax
# making string array with colnames
colnames_array_metatax <- str_c("DATA.",str_replace_na(df.tax.metatax$domain, replacement="NA"),"_",
str_replace_na(df.tax.metatax$phylum,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$class,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$order,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$family,  replacement="NA"),"_",
str_replace_na(df.tax.metatax$genus,   replacement="NA"),"_",
str_replace_na(df.tax.metatax$species, replacement="NA"))
colnames(df.fulldata.metax) = colnames_array_metatax
# saving information on phaeobacter presence
array.phaebac.bin <- data_phys_original@sam_data$phaeobacter
# moving up to genus level or staying at species
if (whichTaxLevel=="genus") {
# moving up in taxonomy for the 16s data, going from species to genus
origNames <- colnames(df.fulldata.metax)
newNames <- apply(str_split_fixed(string = origNames, pattern = "[_]",7)[,1:6],1, paste, collapse="_")
length(unique(newNames))
uniqNames=unique(newNames)
newDat=data.frame(dummy=1:NROW(df.fulldata.metax))
#j=uniqNames[1]
for(j in uniqNames) {
jIndx=grep(j,origNames )
if(length(jIndx)>1) {
newDat=cbind(newDat,rowSums(df.fulldata.metax[,jIndx]))
} else {
newDat=cbind(newDat,(df.fulldata.metax[,jIndx]))
}
}
newDat=newDat[,-1]
colnames(newDat)=uniqNames
# now making that new data into 16s data set
df.fulldata.metax = newDat
}
#df.full.metax <- cbind(array.phaebac.bin,df.fulldata.metax)
df.full.metax <- df.fulldata.metax
# loading in data
df_metab_original <- read.csv("Data/metabolomic_day7,28,70.csv", header = TRUE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE)
df_metab_numOnly = read.csv("Data/metabolomic_day7,28,70_NumOnly.csv", header = FALSE,
sep = ";", stringsAsFactors = FALSE, strip.white = TRUE, fill = TRUE)
# naming columns and rows
colnames(df_metab_numOnly) = colnames(df_metab_original)[-1]
rownames(df_metab_numOnly) = df_metab_original[,1][-1]
# transposing the data frame
df_metab_tmp1 = as.data.frame(t(df_metab_numOnly))
# loading in metadata metabolomics sheet - changed data to .csv first, to make it work
metadata_metabolomics  <- read.csv("Data/Metadata-metabolomics.csv", fill = TRUE, header = TRUE, sep = ";")
# fetching two first rows / names
rownam_samples_metab  <- rownames(df_metab_tmp1)
addit_info_samples    <- df_metab_original[,1]
# running through the names, matching them with phyloseq naming
metab_new_names <- rownam_samples_metab
for (i in 1:length(rownam_samples_metab)) {
num_grep = as.numeric(unlist(regmatches(rownam_samples_metab[i], gregexpr("[[:digit:]]+", rownam_samples_metab[i]))))
if (length(num_grep) == 1 && num_grep > 400) {
# find which sample is talked about
metaDataRow = which(metadata_metabolomics$ï..Sample.no...MCCe. == num_grep)
# checking for TDA
if(metadata_metabolomics$System[metaDataRow]=="TDA"){tdaBin="P"}else{tdaBin="D"}
# finding biorep
biorepSample  = metadata_metabolomics$Bio.Rep[metaDataRow]
# finding time
timeSample    = metadata_metabolomics$Time[metaDataRow] / 7
# inserting into new name format
metab_new_names[i] = paste(tdaBin,biorepSample,timeSample, sep = "-")
}
}
# inserting the correct names
rownames(df_metab_tmp1) = metab_new_names
# removing the additional column with information (1)
df_metab_tmp2 = df_metab_tmp1[,-c(1)]
# finding the common test IDs, to make a full dataset
commonIDs <- intersect(sampleID.metatax, metab_new_names)
data_metab = df_metab_tmp2
data_metax = df.full.metax
# only keeping the relevant testIDs
df_metab = data_metab[metab_new_names %in% commonIDs,]
df_metax = data_metax[sampleID.metatax %in% commonIDs,]
df_metab
View(df_metab)
colnames(df_metab)
colnames(df_metab)[2]
as.numeric(colnames(df_metab)[2])
as.numeric(colnames(df_metab)[2]) > 100
as.numeric(colnames(df_metab)[2]) > 105
# removing all features with masses <= 200 m/Z (mass over charge)
metabFeatToDrop <- which(as.numeric(colnames(df_metab)) <= 200)
metabFeatToDrop
tmp <- subset(df_metab, select = -c(metabFeatToDrop))
View(tmp)
# loading functions
source("Programming/extracting_data_NATH.R")
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
# loading data
chosenDataSet     = "metab"       # "metab" or "genom"
chosenTaxonomy    <- "species"    # "species" or "genus"
chosenWeek        <- "null"       # "1", "4", or "10"
chosenCutoffMass  <- 200          # arbitrary value, removing based on column name
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy, cutOffMetabMass = chosenCutoffMass)
# filtering data
inData <- data_filtering(data=inData, whichDataSet=chosenDataSet, whichWeek=chosenWeek)
# can only select week number 1, 4, or 10
choiceOfWeekHere <- "null"
if (choiceOfWeekHere != "null") {
data = inData[gsub(".+-(?=\\d+$)", "", rownames(inData), perl = TRUE)==choiceOfWeekHere,]
} else {
data = inData
}
dataOneColumns <- grep(x = colnames(data), pattern = "DATA.*")
colVector <- 1:length(colnames(data))
for (i in 1:length(colVector)) {
if (i<=max(dataOneColumns)) {colVector[i] = "green"} else {colVector[i] = "red"}
}
if (chosenTaxonomy=="genus"){
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
} else {
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
}
############################
# building single network with spearman as association measure - Full dataset, both treated and untreated
net_single_fullSet <- netConstruct((data),
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.65,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,weighted = T,
seed = 123456)
props_single_fullSet <- netAnalyze(net_single_fullSet,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
#?summary.microNetProps
summary(props_single_fullSet, numbNodes = 5L)
plot(props_single_fullSet,
labelScale = F,
shortenLabels = "none",
#nodeFilter = "clustMin",
#nodeFilter = "highestBetween",
#nodeFilterPar = 50,
cexLabels = 1.3,
title1 = paste("Single network with Spearman\nWeek:", choiceOfWeekHere, "taxonomy:", chosenTaxonomy),
#title1 = "Single network with Spearman",
showTitle = T,
cexTitle = 1.7)
############################
# compare two networks differentiated upon presence of TDA or not
# splitting the data set of all weeks into two; TDA and noTDA
data_TDA    <- data[substr(rownames(data), 1, 1) == "D",]
data_noTDA  <- data[substr(rownames(data), 1, 1) == "P",]
# Network construction
net_TDA <- netConstruct(data = data_noTDA,
data2 = data_TDA,
#filtTax = "highestVar",
#filtTaxPar = list(highestVar = 50),
measure = "spearman", thresh = 0.65,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_TDA <- netAnalyze(net_TDA,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
summary(props_TDA)
plot(props_TDA,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("No TDA", "TDA"),
hubBorderCol  = "gray40")
# Network construction
net_TDA <- netConstruct(data = data_noTDA,
data2 = data_TDA,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 50),
measure = "spearman", thresh = 0.65,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_TDA <- netAnalyze(net_TDA,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
summary(props_TDA)
plot(props_TDA,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("No TDA", "TDA"),
hubBorderCol  = "gray40")
# can only select week number 1, 4, or 10
choiceOfWeekHere <- "1"
if (choiceOfWeekHere != "null") {
data_weekly = inData[gsub(".+-(?=\\d+$)", "", rownames(inData), perl = TRUE)==choiceOfWeekHere,]
} else {
data_weekly = inData
}
if (chosenTaxonomy=="genus"){
colnames(data_weekly)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data_weekly))
colnames(data_weekly)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data_weekly))
} else {
colnames(data_weekly)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data_weekly))
colnames(data_weekly)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data_weekly))
}
data_weekly_TDA    <- data_weekly[substr(rownames(data_weekly), 1, 1) == "D",]
data_weekly_noTDA  <- data_weekly[substr(rownames(data_weekly), 1, 1) == "P",]
# Network construction
net_weekly_TDA <- netConstruct(data = data_weekly_noTDA,
data2 = data_weekly_TDA,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 50),
measure = "spearman", thresh = 0.8,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_weekly_TDA <- netAnalyze(net_weekly_TDA,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
plot(props_weekly_TDA,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
# showTitle = TRUE,
# title2 = paste("Week",choiceOfWeekHere),
#title(main = paste("Week",choiceOfWeekHere)),
#cexTitle = 3.7,
cexTitle = 2.5,
groupNames = c(paste("No TDA\nWeek:",choiceOfWeekHere), paste("TDA\nWeek:",choiceOfWeekHere)),
hubBorderCol  = "gray40")
# Network construction
net_weekly_TDA <- netConstruct(data = data_weekly_noTDA,
data2 = data_weekly_TDA,
#filtTax = "highestVar",
#filtTaxPar = list(highestVar = 50),
measure = "spearman", thresh = 0.8,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_weekly_TDA <- netAnalyze(net_weekly_TDA,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
plot(props_weekly_TDA,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
# showTitle = TRUE,
# title2 = paste("Week",choiceOfWeekHere),
#title(main = paste("Week",choiceOfWeekHere)),
#cexTitle = 3.7,
cexTitle = 2.5,
groupNames = c(paste("No TDA\nWeek:",choiceOfWeekHere), paste("TDA\nWeek:",choiceOfWeekHere)),
hubBorderCol  = "gray40")
