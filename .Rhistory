#which(unname(apply(inData, 2, var))==0)
throwAway <- which(apply(inData, 2, var)==0)[]
# dropping columns by index
inData = inData[, -throwAway]
rm(throwAway) # to save memory
print("Generating metadata...")
## finding different interesting information on the set
## mean, var, STD, ratio of zeros,
meanData  <- unname(apply(inData, 2, mean))
stdData   <- unname(apply(inData, 2, sd))
varData   <- unname(apply(inData, 2, var))
ratioData <- unname(apply(inData, 2, function(x){length(which(x==0))/length(x)}))
CVData    <- unname(apply(inData, 2, function(x){sd(x)/mean(x)}))
plot(sort(meanData), main = "Mean Data")
plot(sort(stdData), main = "Standard Variations")
plot(sort(varData), main = "Variance")
plot(sort(ratioData), main = "Singleton ratios")
plot(sort(CVData), main = "Relative standard deviation")
# fitting Michaelis-Menten function to data
print("Fitting Michaelis-Menten function...")
time_frame <- seq(from = 1, to = length(ratioData), by = 1)
mmModel <- nls(sort(ratioData) ~ Vm*time_frame/(K+time_frame),
start = list(Vm=max(ratioData), K=max(time_frame) / 2))
#mmModel <- nls(sort(ratioData) ~ Vm/(1+exp(-growthRate*(K+time_frame))),
#              start = list(Vm=max(ratioData), K=max(time_frame)/2, growthRate=0.5))
# parameters estimated including confidence interval
coef(mmModel)
confint(mmModel, level = 0.9)
# defining to estimated parameters
Vmax = coef(mmModel)[[1]]
K    = coef(mmModel)[[2]]
# visualizing the model in relation to ratio Data
plot(sort(ratioData) ~ time_frame, col = "grey")
lines(predict(mmModel) ~ time_frame, lwd = 3, col = "dark red")
#abline(h = threshold_ratio)
# finding local maxima, potentiel knee points
kneePoints_collected <- which(diff(sign(diff(ratioData)))==-2)+1
# finding the linear fit from origo to asymptote
a_linearFit <- max(ratioData) / max(time_frame)
b_linearFit <- min(ratioData) - a_linearFit*min(time_frame)
max_x = which(sort(ratioData)>=max(ratioData)*0.97)[1]
max_y = Vmax*max_x / (K+max_x)
a_linearFit <- (max_y - min(ratioData)) / (max_x-min(time_frame))
b_linearFit <- min(ratioData) - a_linearFit*min(time_frame)
abline(a = b_linearFit, b=a_linearFit)
# using distance formular on all knee points to line
# distance formula: d = abs(a*x+b-y)/sqrt(a^2+1)
longest_distance  <- 0
longest_x         <- 0
#i=kneePoints_collected[400]
for (i in which(kneePoints_collected<=max_x)) {
temp_x = i
temp_y = Vmax*temp_x / (K+temp_x)
#points(temp_x, temp_y)
dist = abs(a_linearFit*temp_x + b_linearFit-temp_y)/sqrt(a_linearFit^2+1)
if (dist >= longest_distance) {longest_distance = dist; longest_x = temp_x}
}
# defining the cutoff threshold
threshold_ratio <- Vmax*longest_x / (K+longest_x)
points(longest_x, threshold_ratio)
abline(h = threshold_ratio)
# if the ratioData is above the found cutoff, it is to be removed
keepIn <- which(ratioData <= threshold_ratio)
# dropping columns by index
sprintf("Filtering out data with zero-ratio above %f...", threshold_ratio)
inData = inData[, keepIn]
rm(keepIn) # to save memory
meanData  <- unname(apply(inData, 2, mean))
stdData   <- unname(apply(inData, 2, sd))
varData   <- unname(apply(inData, 2, var))
ratioData <- unname(apply(inData, 2, function(x){length(which(x==0))/length(x)}))
CVData    <- unname(apply(inData, 2, function(x){sd(x)/mean(x)}))
plot(sort(meanData), main = "Mean Data")
plot(sort(stdData), main = "Standard Variations")
plot(sort(varData), main = "Variance")
plot(sort(ratioData), main = "Singleton ratios")
plot(sort(CVData), main = "Relative standard deviation")
inData = cbind(testID, OUA, inData)
outData = inData
rm(list=setdiff(ls(), "outData"))
print("Filtering done...")
return(outData)
}
# loading function
source("Programming/extracting_data_KAT.R")
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/Functions.R")
# setting seed
set.seed(123)
# loading data
#chosenWeek <- "Week 04"
#inData <- extracting_data_KAT(whichWeek = chosenWeek)
inData <- extracting_data_NATH()
# filtering data
inData <- data_filtering(inData)
source("Programming/data_filtering.R")
source("Programming/Functions.R")
# setting seed
set.seed(123)
# loading data
#chosenWeek <- "Week 04"
#inData <- extracting_data_KAT(whichWeek = chosenWeek)
inData <- extracting_data_NATH()
# filtering data
inData <- data_filtering(inData)
# making DBSCAN model
inDataScale=data.frame(scale(inData, center = T, scale = T))
findEpsi(t(inDataScale), minRange = 2, maxRange = 5, steps = .1 ,maxY=15,minP = 3)
DB=dbscan::dbscan(t(inDataScale),3.7,3); print(DB)
clusVars=data.frame(Clus=DB$cluster,Vars=colnames(inDataScale))
DB
# loading libraries
library(dbscan)
library(fpc)
library(factoextra)
DB=dbscan::dbscan(t(inDataScale),3.7,3); print(DB)
clusVars=data.frame(Clus=DB$cluster,Vars=colnames(inDataScale))
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==1)
?dbscan
plot(DB)
plot(inData)
plot(inData)
plot(DB$cluster)
plot(DB$cluster==1)
plot(DB$cluster==1, DB$cluster==2)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==1)
clusVars
View(clusVars)
# loading NetCoMi library
library(NetCoMi)
# loading functions
source("Programming/extracting_data_KAT.R")
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
inData <- extracting_data_NATH()
# filtering data
inData <- data_filtering(inData)
dataOneColumns <- grep(x = colnames(data), pattern = "DATA.*")
colVector <- 1:length(colnames(data))
for (i in 1:length(colVector)) {
if (i<=max(dataOneColumns)) {colVector[i] = "green"} else {colVector[i] = "red"}
}
data = inData
dataOneColumns <- grep(x = colnames(data), pattern = "DATA.*")
colVector <- 1:length(colnames(data))
for (i in 1:length(colVector)) {
if (i<=max(dataOneColumns)) {colVector[i] = "green"} else {colVector[i] = "red"}
}
chosenTaxonomy  <- "species"
if (chosenTaxonomy=="genus"){
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
} else {
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
}
# building single network with SPRING as association measure - Full dataset, both treated and untreated
net_single_fullSet <- netConstruct(data,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.6,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single_fullSet <- netAnalyze(net_single_fullSet,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
#?summary.microNetProps
summary(props_single_fullSet, numbNodes = 5L)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
net_single_fullSet <- netConstruct(data,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.3,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single_fullSet <- netAnalyze(net_single_fullSet,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
#?summary.microNetProps
summary(props_single_fullSet, numbNodes = 5L)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
net_single_fullSet <- netConstruct(data,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.5,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single_fullSet <- netAnalyze(net_single_fullSet,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
#?summary.microNetProps
summary(props_single_fullSet, numbNodes = 5L)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
plot(inDataScale[DB$cluster %in% 1:2])
plot(inDataScale[DB$cluster %in% 1:2])
plot(inDataScale[DB$cluster %in% 1])
plot(inDataScale[DB$cluster %in% 3])
plot(inDataScale[DB$cluster %in% 2])
clusVars=data.frame(Clus=DB$cluster,Vars=colnames(inDataScale))
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==1)
DB
plot(inDataScale[DB$cluster %in% 4])
plot(inDataScale[DB$cluster %in% 5])
plot(inDataScale[DB$cluster %in% 6])
plot(inDataScale[DB$cluster %in% 7])
plot(inDataScale[DB$cluster %in% 2])
plot(inDataScale[DB$cluster %in% 1])
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==1)
cor(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhodobacterales_Rhodobacteraceae_Jannaschia_NA,inData$132.00319)
cor(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhodobacterales_Rhodobacteraceae_Jannaschia_NA,inData$`132.00319`)
plot(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhodobacterales_Rhodobacteraceae_Jannaschia_NA,inData$`132.00319`)
cor(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhodobacterales_Rhodobacteraceae_Jannaschia_NA,inData$`132.00343`)
cor(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhodobacterales_Rhodobacteraceae_Jannaschia_NA,inData$`280.26273`)
plot(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhodobacterales_Rhodobacteraceae_Jannaschia_NA,inData$`280.26273`)
?cor
plot(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhodobacterales_Rhodobacteraceae_Jannaschia_NA,inData$`280.26273`, method = "spearman")
cor(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhodobacterales_Rhodobacteraceae_Jannaschia_NA,inData$`280.26273`, method = "spearman")
cor(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhodobacterales_Rhodobacteraceae_Jannaschia_NA,inData$`280.26273`, method = "pearson")
?dbscan
plot(inDataScale[DB$cluster %in% 1])
DB$eps
DB$minPts
DB$cluster
findEpsi(t(inDataScale), minRange = 2, maxRange = 5, steps = .1 ,maxY=15,minP = 5)
findEpsi(t(inDataScale), minRange = 2, maxRange = 5, steps = .1 ,maxY=15,minP = 2)
findEpsi(t(inDataScale), minRange = 2, maxRange = 5, steps = .1 ,maxY=15,minP = 3)
findEpsi(t(inDataScale), minRange = 2, maxRange = 5, steps = .1 ,maxY=15,minP = 4)
DB=dbscan::dbscan(t(inDataScale),3.6,4); print(DB)
clusVars=data.frame(Clus=DB$cluster,Vars=colnames(inDataScale))
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==1)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==2)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==3)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==4)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==5)
plot(inDataScale[DB$cluster %in% 1])
findEpsi(t(inDataScale), minRange = 2, maxRange = 5, steps = .1 ,maxY=15,minP = 3)
DB=dbscan::dbscan(t(inDataScale),3.7,3); print(DB)
clusVars=data.frame(Clus=DB$cluster,Vars=colnames(inDataScale))
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==5)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==6)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==7)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==2)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==3)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==4)
#sub <- subset(clusVars, Clus==5); print(sub)
subset(clusVars, Clus==1)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.2,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 0.5,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
# building single network with SPRING as association measure - Full dataset, both treated and untreated
net_single_fullSet <- netConstruct(data,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.5,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,
seed = 123456)
props_single_fullSet <- netAnalyze(net_single_fullSet,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
#?summary.microNetProps
summary(props_single_fullSet, numbNodes = 5L)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
title1 = "Single network with Spearman",
showTitle = T,
cexTitle = 2.3,
nodeColor = colVector)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
title1 = "Single network with Spearman",
showTitle = T,
cexTitle = 2.3)
View(complete_data)
plot(inDataScale[DB$cluster %in% 1])
DB
findEpsi(t(inDataScale), minRange = 2, maxRange = 5, steps = .1 ,maxY=15,minP = 3)
findEpsi(t(inDataScale), minRange = 2, maxRange = 5, steps = .01 ,maxY=15,minP = 3)
findEpsi(t(inDataScale), minRange = 2, maxRange = 20, steps = .1 ,maxY=15,minP = 3)
findEpsi(t(inDataScale), minRange = 2, maxRange = 10, steps = .1 ,maxY=15,minP = 3)
View(data_metax)
plot(data$Phaeobacter~data$Alteromonas)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
title1 = "Single network with Spearman",
showTitle = T,
cexTitle = 2.3)
plot(data$Jannaschia~data$`943.99194`)
LM=lm(data$Jannaschia~data$`943.99194`)
summary(LM)
plot(LM)
plot(data$Jannaschia[-13]~data$`943.99194`[-13])
LM=lm(data$Jannaschia[-13]~data$`943.99194`[-13])
summary(LM)
plot(LM)
cor(data$Jannaschia[-13]~data$`943.99194`[-13])
cor(data$Jannaschia[-13],data$`943.99194`[-13])
cor(data$Jannaschia[-13],data$`943.99194`[-13],method = "spear" )
cor(data$Jannaschia[-13],data$`943.99194`[-13],method = "spear" )^2
cor(data$Jannaschia[-13],data$`943.99194`[-13],method = "pear" )^2
# building single network with SPRING as association measure - Full dataset, both treated and untreated
net_single_fullSet <- netConstruct(data,
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.5,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,weighted = T,
seed = 123456)
props_single_fullSet <- netAnalyze(net_single_fullSet,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
#?summary.microNetProps
summary(props_single_fullSet, numbNodes = 5L)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
title1 = "Single network with Spearman",
showTitle = T,
cexTitle = 2.3)
# building single network with SPRING as association measure - Full dataset, both treated and untreated
net_single_fullSet <- netConstruct(log1p(data),
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "spearman",thresh = 0.5,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,weighted = T,
seed = 123456)
props_single_fullSet <- netAnalyze(net_single_fullSet,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
#?summary.microNetProps
summary(props_single_fullSet, numbNodes = 5L)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
title1 = "Single network with Spearman",
showTitle = T,
cexTitle = 2.3)
# building single network with SPRING as association measure - Full dataset, both treated and untreated
net_single_fullSet <- netConstruct(log1p(data),
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 100),
#filtSamp = "totalReads",
#filtSampPar = list(totalReads = 1000),
measure = "pearson",thresh = 0.5,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,weighted = T,
seed = 123456)
props_single_fullSet <- netAnalyze(net_single_fullSet,
centrLCC = TRUE,
clustMethod = "cluster_fast_greedy",
hubPar = "eigenvector",
weightDeg = FALSE, normDeg = FALSE)
#?summary.microNetProps
summary(props_single_fullSet, numbNodes = 5L)
plot(props_single_fullSet,
labelScale = F,
cexLabels = 1.3,
#title1 = paste("Single network with Spearman",chosenWeek, chosenTaxonomy),
title1 = "Single network with Spearman",
showTitle = T,
cexTitle = 2.3)
cor(data$Jannaschia[-13],data$`943.99194`[-13],method = "pear" )^2
cor(log1p(data$Jannaschia[-13]),log1p(data$`943.99194`[-13]),method = "pear" )^2
LM=lm(log1p(data$Jannaschia[-13]),log1p(data$`943.99194`[-13]))
LM=lm(log1p(data$Jannaschia[-13])~log1p(data$`943.99194`[-13]))
summary(LM)
plot(LM)
plot(log1p(data$Jannaschia[-13]),log1p(data$`943.99194`[-13]))
