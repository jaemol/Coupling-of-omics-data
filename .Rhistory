props_untreated_treated <- netAnalyze(net_untreated_treated,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
plot(props_untreated_treated,
#layout = lay_fr,
#layout = "circle",
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = F,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("Untreated", "Treated"),
hubBorderCol  = "gray40")
# Network construction - TDAvsControl
net_untreated_treated <- netConstruct(data = data_untreated,
data2 = data_treated,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 50),
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 50),
measure = "spearman", thresh = 0.4,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3,# weighted = F,
seed = 123456)
props_untreated_treated <- netAnalyze(net_untreated_treated,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
plot(props_untreated_treated,
#layout = lay_fr,
#layout = "circle",
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = F,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("Untreated", "Treated"),
hubBorderCol  = "gray40")
?netConstruct
# Network construction - TDAvsControl
net_untreated_treated <- netConstruct(data = data_untreated,
data2 = data_treated,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 50),
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 50),
measure = "spearman", thresh = 0.4,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = F,
seed = 123456)
props_untreated_treated <- netAnalyze(net_untreated_treated,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
plot(props_untreated_treated,
#layout = lay_fr,
#layout = "circle",
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = F,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("Untreated", "Treated"),
hubBorderCol  = "gray40")
# Network construction - TDAvsControl
net_untreated_treated <- netConstruct(data = data_untreated,
data2 = data_treated,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 50),
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 50),
measure = "spearman", thresh = 0.45,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = F,
seed = 123456)
props_untreated_treated <- netAnalyze(net_untreated_treated,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
plot(props_untreated_treated,
#layout = lay_fr,
#layout = "circle",
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = F,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("Untreated", "Treated"),
hubBorderCol  = "gray40")
# Network construction - TDAvsControl
net_untreated_treated <- netConstruct(data = data_untreated,
data2 = data_treated,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 76),
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 50),
measure = "spearman", thresh = 0.48,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = F,
seed = 123456)
props_untreated_treated <- netAnalyze(net_untreated_treated,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
plot(props_untreated_treated,
#layout = lay_fr,
#layout = "circle",
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = F,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("Untreated", "Treated"),
hubBorderCol  = "gray40")
# Network construction - TDAvsControl
net_untreated_treated <- netConstruct(data = data_untreated,
data2 = data_treated,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 76),
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 50),
measure = "spearman", thresh = 0.1,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = F,
seed = 123456)
props_untreated_treated <- netAnalyze(net_untreated_treated,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
plot(props_untreated_treated,
#layout = lay_fr,
#layout = "circle",
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = F,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("Untreated", "Treated"),
hubBorderCol  = "gray40")
# Network construction - TDAvsControl
net_untreated_treated <- netConstruct(data = data_untreated,
data2 = data_treated,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 120),
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 50),
measure = "spearman", thresh = 0.58,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = F,
seed = 123456)
props_untreated_treated <- netAnalyze(net_untreated_treated,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
plot(props_untreated_treated,
#layout = lay_fr,
#layout = "circle",
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = F,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("Untreated", "Treated"),
hubBorderCol  = "gray40")
# Network construction - TDAvsControl
net_untreated_treated <- netConstruct(data = data_untreated,
data2 = data_treated,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 100),
#filtTax = "highestFreq",
#filtTaxPar = list(highestFreq = 50),
measure = "spearman", thresh = 0.50,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = F,
seed = 123456)
props_untreated_treated <- netAnalyze(net_untreated_treated,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
plot(props_untreated_treated,
#layout = lay_fr,
#layout = "circle",
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = F,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("Untreated", "Treated"),
hubBorderCol  = "gray40")
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/Functions.R")
# loading data
chosenDataSet       = "metab"       # "metab" or "genom"
chosenTaxonomy      <- "species"    # "species" or "genus"
chosenWeek          <- "null"       # "1", "4", or "10"
chosenCutoffMass    <- 200          # arbitrary value, removing based on column name
chosenNormalization <- "peak"        # can either be 'mad', 'median', 'mean' or 'peak'
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization=chosenNormalization)
# filtering data
chosenCutoffFiltering <- 0.85
inData <- data_filtering(data=inData, whichDataSet=chosenDataSet, whichWeek=chosenWeek, cutOffOrAuto=chosenCutoffFiltering)
# can only select week number 1, 4, 6, or 10
choiceOfWeekHere <- "null"
if (choiceOfWeekHere != "null") {
data = inData[gsub(".+-(?=\\d+$)", "", rownames(inData), perl = TRUE)==choiceOfWeekHere,]
} else {
data = inData
}
# run this for to simplify the naming of the 16s rRNA sequencing data
if (chosenTaxonomy=="genus"){
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
} else {
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
}
############################
# compare two networks differentiated upon presence of TDA or not
# splitting the data set of all weeks into three; TDA, noTDA and control
data_TDA      <- data[substr(rownames(data), 1, 1) == "D",]
data_noTDA    <- data[substr(rownames(data), 1, 1) == "P",]
data_control  <- data[substr(rownames(data), 1, 1) == "C",]
chosenThreshold <- 0.7
#####
# trying data_analyze
# henriciella + 770.4851152
feat1 <- "Cohaesibacter_NA"
feat2 <- "257.1857486"
data_analyze(data = inData, feature1 = feat1, feature2 = feat2)
#####
# trying data_analyze
# henriciella + 770.4851152
feat1 <- "Cohaesibacter"
feat2 <- "257.1857486"
data_analyze(data = inData, feature1 = feat1, feature2 = feat2)
feature1 = "Cohaesibacter_NA"
# finding the correct features from the data set
feat1 = data[which(stringr::str_split_fixed(string = colnames(data),
pattern = "[_]",7)==feature1, arr.ind = TRUE)[1]]
stringr::str_split_fixed(string = colnames(data),
pattern = "[_]",7
stringr::str_split_fixed(string = colnames(data),
pattern = "[_]",7)==feature1, arr.ind = TRUE
stringr::str_split_fixed(string = colnames(data),
pattern = "[_]",7)
stringr::str_split_fixed(string = colnames(inData),
pattern = "[_]",7)
plot(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhizobiales_Rhizobiaceae_Cohaesibacter_NA, inData$`257.1857486`)
par(mfrow = c(1,1))
plot(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhizobiales_Rhizobiaceae_Cohaesibacter_NA, inData$`257.1857486`)
cor(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhizobiales_Rhizobiaceae_Cohaesibacter_NA, inData$`257.1857486`, "spear")
cor(inData$DATA.Bacteria_Proteobacteria_Alphaproteobacteria_Rhizobiales_Rhizobiaceae_Cohaesibacter_NA, inData$`257.1857486`, method = "spear")
# loading libraries
library(vegan)
library(gsubfn)
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/data_analyze.R")
source("Programming/Functions.R")
# getting the data
list[data_metab, groups, days]  <- getMetabDataNormEval(cutOffMetabMass = 200)
# implementing the different normalizations
data_peak   <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/max(x)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
data_median <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/(median(x)+1)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
data_mean   <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/(mean(x)+1)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
data_mad    <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/(mad(x, center = median(x), na.rm = FALSE, constant = 1)+1)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
# adonis(Y ~ NO3, data=dat, strata=dat$field, perm=999)
adonis2(data_peak ~ groups*days, strata = NULL, permutations = 999, by = NULL, method = "bray") # bray-curtis
adonis2(data_median ~ groups*days, strata = NULL, permutations = 999, by = NULL, method = "bray")
adonis2(data_mad ~ groups*days, strata = NULL, permutations = 999, by = NULL, method = "bray")
adonis2(data_mean ~ groups*days, strata = NULL, permutations = 999, by = NULL, method = "bray")
groups[i] <- "C"
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/data_analyze.R")
source("Programming/Functions.R")
# getting the data
list[data_metab, groups, days]  <- getMetabDataNormEval(cutOffMetabMass = 200)
# implementing the different normalizations
data_peak   <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/max(x)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
data_median <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/(median(x)+1)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
data_mean   <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/(mean(x)+1)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
data_mad    <- as.data.frame(apply(data_metab,MARGIN = 2, function(x){x/(mad(x, center = median(x), na.rm = FALSE, constant = 1)+1)})); rownames(data_peak)=rownames(data_metab); colnames(data_peak)=colnames(data_metab)
# adonis(Y ~ NO3, data=dat, strata=dat$field, perm=999)
adonis2(data_peak ~ groups*days, strata = NULL, permutations = 999, by = NULL, method = "bray") # bray-curtis
adonis2(data_median ~ groups*days, strata = NULL, permutations = 999, by = NULL, method = "bray")
adonis2(data_mad ~ groups*days, strata = NULL, permutations = 999, by = NULL, method = "bray")
adonis2(data_mean ~ groups*days, strata = NULL, permutations = 999, by = NULL, method = "bray")
# loading NetCoMi library
library(NetCoMi)
# loading functions
source("Programming/extracting_data_NATH.R")
source("Programming/data_filtering.R")
source("Programming/Functions.R")
# loading data
chosenDataSet       = "metab"       # "metab" or "genom"
chosenTaxonomy      <- "species"    # "species" or "genus"
chosenWeek          <- "null"       # "1", "4", or "10"
chosenCutoffMass    <- 200          # arbitrary value, removing based on column name
chosenNormalization <- "peak"        # can either be 'mad', 'median', 'mean' or 'peak'
inData <- extracting_data_NATH(whichWeek=chosenWeek, whichTaxLevel=chosenTaxonomy,
cutOffMetabMass=chosenCutoffMass, whichNormalization=chosenNormalization)
# filtering data
chosenCutoffFiltering <- 0.85
inData <- data_filtering(data=inData, whichDataSet=chosenDataSet, whichWeek=chosenWeek, cutOffOrAuto=chosenCutoffFiltering)
# can only select week number 1, 4, 6, or 10
choiceOfWeekHere <- "null"
if (choiceOfWeekHere != "null") {
data = inData[gsub(".+-(?=\\d+$)", "", rownames(inData), perl = TRUE)==choiceOfWeekHere,]
} else {
data = inData
}
# run this for to simplify the naming of the 16s rRNA sequencing data
if (chosenTaxonomy=="genus"){
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)","\\1",colnames(data))
} else {
colnames(data)=gsub("DATA.Bacteria_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
colnames(data)=gsub("DATA.Archaea_[A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.][A-Za-z]*[_.](.*)[_.](.*)","\\1",colnames(data))
}
############################
# compare two networks differentiated upon presence of TDA or not
# splitting the data set of all weeks into three; TDA, noTDA and control
data_TDA      <- data[substr(rownames(data), 1, 1) == "D",]
data_noTDA    <- data[substr(rownames(data), 1, 1) == "P",]
data_control  <- data[substr(rownames(data), 1, 1) == "C",]
chosenThreshold <- 0.7
# Network construction - noTDAvsControl
net_noTDA_control <- netConstruct(data = data_noTDA,
data2 = data_control,
filtTax = "highestVar",
filtTaxPar = list(highestVar = 76),
measure = "spearman", thresh = chosenThreshold,
measurePar = list(nlambda=10,
rep.num=10),
normMethod = "none",
zeroMethod = "none",
sparsMethod = "threshold",
dissFunc = "signed",
verbose = 3, weighted = T,
seed = 123456)
props_noTDA_control <- netAnalyze(net_noTDA_control,
centrLCC = FALSE,
avDissIgnoreInf = TRUE,
sPathNorm = FALSE,
clustMethod = "cluster_fast_greedy",
#hubPar = c("degree", "between", "closeness"),
hubPar = "eigenvector",
hubQuant = 0.9,
lnormFit = TRUE,
normDeg = FALSE,
normBetw = FALSE,
normClose = FALSE,
normEigen = FALSE)
summary(props_noTDA_control)
plot(props_noTDA_control,
sameLayout = TRUE,
nodeColor = "cluster",
nodeSize = "mclr",
labelScale = FALSE,
shortenLabels = "none",
cexNodes = 1.5,
cexLabels = 1.3,
cexHubLabels = 1,
cexTitle = 3.7,
groupNames = c("No TDA", "Control"),
hubBorderCol  = "gray40")
